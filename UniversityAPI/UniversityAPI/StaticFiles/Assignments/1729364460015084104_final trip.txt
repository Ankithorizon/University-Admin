textarea:
<textarea readonly rows="5" cols="90" 
                            id="messagecontenttextare"
                            style="color: red; background-color: lightyellow" >@finalMessageContent</textarea>
------------------
html raw:
@Html.Raw(finalMessageContent)
--------------------
optional sections of layout file:

    @section messagecontent {
   
            <p>        
                @{ 
                    if (TempData["OPM"] != null)
                    {
                       @TempData["OPM"].ToString();
                    }
                }                               
            </p>
             
     <div id="floater">        
    </div>
    }
---------------
access session at view:
@section rightcontent {
<p>haha right content</p>    
        @{
            var SessionLogin = Session["SessionLogin"] as SessionLogin;
            if (SessionLogin != null)
            {
            <b>@SessionLogin.UserName
            (@SessionLogin.LoginTime)</b>
            }
            else
            {            
            <p>You are not yet Login... Please Login and then access Create New Account module...</p> 
        }
    }
}
-----------
script section at view:
@section scripts
{
  <script type="text/javascript">
        $(document).ready(function () {
    });
    </script>
}
-----------
rich textarea with tinymce:
<textarea name="contentTA" style="width:100%"></textarea>
tinymce.init({
                selector: "textarea",
                theme: "modern",
			......
            });
---------
disable button:
$('#btnSubmit').attr("disabled", "disabled");
---------
ajax post:
// send message
            $("#btnSubmit").click(function () {              
                var htmlContent = tinymce.activeEditor.getContent();   
                var ChatWindowMessage = {                                        
                    MessageContentTA:htmlContent,                    
                    FromUserName: $('#theSelectFrom :selected').val(),
                    ToUserName: $('#theSelectTo :selected').val()
                };
                var ajaxPage = "/ChatWindow/SendMessage";
                $.ajax({
                    type: "POST",
                    url: ajaxPage,
                    data: JSON.stringify(ChatWindowMessage),
                    contentType: "application/json;charset=utf-8",
                    success: function (response) {
                        Get_SentMessages();
                        Get_ReceivedMessages()
                    },
                    // ajax call error
                    error: function (obj) {                        
                        alert("ajax call error");
                    },

                });
                
            }); // end of function
---------------
ajax load html dropdownlist box:
<select id="theSelectFrom"></select>
function LoadToSelectList() {
                var options = [];
                var data = {
                    FromUserName: $('#theSelectFrom :selected').val()
                };
                var ajaxPage = "/ChatWindow/LoadUsernamesList";
                $.ajax({
                    type: "POST",
                    url: ajaxPage,
                    data: JSON.stringify(data),
                    contentType: "application/json;charset=utf-8",
                    success: function (result) {
                        var haha = $("#theSelectTo");
                        haha.empty();
                        var optionsHtml;
                        for (var i = 0; i < result.Records.length; i++) {
                            optionsHtml += "<option value='" + result.Records[i].Value + "'>" +
                                                    result.Records[i].Text +
                                               "</option>";

                        }
                        haha.append(optionsHtml);
                    },
                    // ajax call error
                    error: function (obj) {
                        alert("ajax call error");
                    },

                });
            }
--------------
on change event of dropdownlist box:
$('#theSelectTo').on('change', function () {
                // alert(this.value); 
            });
---------
try parse:
     string sAmount = (string)jo["Amount"];
                int iAmount;
                if (int.TryParse(sAmount,out iAmount))
                {
                    // int iAmount = System.Convert.ToInt32(sAmount);
                    decimal dAmount = (decimal)iAmount;

                    newAccount.InitialBalance = dAmount;
--------
parse json result at view:
    $("#btnSubmit").click(function () {
                var newaccount = {
                    Amount: $('[id$="amount"]').val(),
                    AccountType: $('#theSelect :selected').val(),
                    AccountTypeName: $('#theSelect :selected').text()
                };
                var ajaxPage = "/CreateAccount/CreateNewAccount";
                $.ajax({
                    type: "POST",
                    url: ajaxPage,
                    data: JSON.stringify(newaccount),
                    contentType: "application/json;charset=utf-8",
                    success: function (response) {
                        // reload MyAccounts
                        GetMyAccounts();
                        amt.val('');
                        if (response.Result.Status <= 0) {
                            op_success(response.Result.Message);
                        }
                        // NOTOK
                        else {
                            op_fail(response.Result.Message);
                        }
                    },
                    // ajax call error
                    error: function (obj) {
                        amt.val('');
                        op_fail("Ajax Call Error");
                    },

                });
            }); // end of function
-----------
get html (partial view display) at view:
      function GetMyAccounts() {
                $.ajaxSetup({ cache: false });
                $.ajax({
                    url: '/CreateAccount/LoadMyAccounts',
                    contentType: 'application/html; charset=utf-8',
                    type: 'GET',
                    dataType: 'html'
                })
                .success(function (result) {
                    $('#accounts').html(result);
                })
                .error(function (xhr, status) {
                    alert(status);
                })
            }
----------
display div for some time using jquery:
    function op_success(message) {
                var div = $("#floater");

                div.html("<img src='/image/success.png' height='48' width='48' style='vertical-align: middle;' /><b>operation done...</b>" + message);
                div.fadeIn("slow");
                div.queue(function () {
                    setTimeout(function () {
                        div.dequeue();
                    }, 2000);
                });
                div.fadeOut("fast");
            }
            function op_fail(message) {
                var div = $("#floater");

                div.html("<img src='/image/error.png' height='48' width='48' style='vertical-align: middle;' /><b>operation fail...</b>" + message);
                div.fadeIn("slow");
                div.queue(function () {
                    setTimeout(function () {
                        div.dequeue();
                    }, 2000);
                });
                div.fadeOut("fast");
            }
--------------
crystal reports:
this will generate report and create pdf file and download at client
at client:
<div><a href="@Url.Action("ExportReport")"> Get Report in PDF</a></div>
at server:
    public ActionResult ExportReport()
        {
            List<BankUsers_CR> allUsers = new List<BankUsers_CR>();
            allUsers = bll.Get_BankUsers_CR();           

            ReportDocument rd = new ReportDocument();
            rd.Load(Path.Combine(Server.MapPath("~/Reports"), "BankUsers_List.rpt"));
            rd.SetDataSource(allUsers);

            Response.Buffer = false;
            Response.ClearContent();
            Response.ClearHeaders();


            try
            {
                Stream stream = rd.ExportToStream(CrystalDecisions.Shared.ExportFormatType.PortableDocFormat);
                stream.Seek(0, SeekOrigin.Begin);
                return File(stream, "application/pdf", "BankUsersList.pdf");
            }
            catch (Exception ex)
            {
                throw;
            }
        }
--------------
jquery datatable for sorting,paging,searching,master detail
C:\DONE\CD-DEC\5-7\FCUKBank_MVC\FCUKBank_MVC
controller:jQDataTableController
--------------
multilanguage (resource):
at BLL:
public List<MultiLang_BankUserAccount> Get_BankUserAccounts(int BUID, string cultureinfo)
        {
            List<MultiLang_BankUserAccount> datas = new List<MultiLang_BankUserAccount>();

            Thread.CurrentThread.CurrentCulture = new CultureInfo(cultureinfo);
            // Console.WriteLine(i.ToString("c"));

            var bankuser_acs = db.BankUserAccounts
                .Where(buac => buac.BankUserID == BUID).ToList();
            if (bankuser_acs != null)
            {
                if (bankuser_acs.Count() >= 1)
                {
                    foreach (var buac in bankuser_acs)
                    {
                        MultiLang_BankUserAccount data = new MultiLang_BankUserAccount();
                        data.AccountID = buac.AccountID;
                        data.AccountType = buac.AccountType;
                        data.BankUserID = buac.BankUserID;                        
                        // u must convert decimal? -> decimal -> string -> apply format as per 
                        // language setting
                        data.FinalBalance = ((decimal)buac.FinalBalance).ToString("c");
                        data.IntermediateBalance = ((decimal)buac.IntermediateBalance).ToString("c");
                        datas.Add(data);
                    }
                }
                else
                {
                    datas = null;
                }
            }
            else
            {
                datas = null;
            }
            return datas;
        }

at controller:
List<MultiLang_BankUserAccount> datas = bll.Get_BankUserAccounts(BUID,LanguageName);

at view:
    <!-- ok
<h3>FirstName : @Resources.MultiLangController.BankUserData.FirstName</h3>
<h3>LastName : @Resources.MultiLangController.BankUserData.LastName</h3>
-->
----------------
custom pager:
control has collection of datas and page links logic
  <td id="F" style="background-color:#00FF00">
                    <p class="PTR">@Model.F</p>
                    <p class="LABEL">First</p>
                </td>
   var MTID = 0;
            $('#F').click(function () {
                if ($("#F p.PTR").text() <= 0) {
                }
                else {
                    MTID = $("#F p.PTR").text();
                    GetDetailTrans();
                }
            });
              
........
--------------
how to handle click event on table cell/row in jquery:
     <table id="detailtran" >
        <tr>
            <th>TRMID#</th>
            <th>TRDID#</th>
            <th>ActionName</th>                                    
            <th>Amount</th>                        
            <th>From AC#</th>                        
            <th>To AC#</th>                        
            <th>Node#</th>                        
            <th>Status</th>                        
            <th>Flag</th>                        
        </tr>
        @foreach (TranDetailDisplay tran in Model)
        {
            <tr bgcolor="pink">
                <td class="field0">@tran.TranMainID</td>
                <td class="field1">@tran.TranDetailID</td>
                <td>@tran.ActionName</td>                
                <td>@tran.Amount</td>                                                        
                <td>@tran.FromAccountID</td>                                                        
                <td>@tran.ToAccountID</td>                                                        
                <td>@tran.NodeID</td>                                                        
                <td class="status">@tran.NodeStatus</td>                                                        
                <td class="flag">@tran.ChangeFlag</td>                                                        
            </tr>         
        }
    </table>
  $('#detailtran tr').click(function () {
                MTID = $(this).find('td.field0').text();
                DTID = $(this).find('td.field1').text();
                flag_ = $(this).find('td.flag').text();
                status_ = $(this).find('td.status').text();
                if (flag_ == "False" && status_ == "Clear") {
                    op_fail("this node is already clear");
                    // alert("this node is already clear");
                }
                else if (flag_ == "False" && status_ == "Not Clear") {
                    // alert("u can not update this node until u first update previous node(s)");
                    op_fail("u can not update this node until u first update previous node(s)");
                }
                else {
                    // alert("now updating node...");
                    op_success("now updating node...");
                    UpdateNodes();
                }
            });
-----------------
model error with post:
@Scripts.Render("~/bundles/jqueryval")    
jquery.validate.unobtrusive.min.js
jquery.validate.min.js
jquery.unobtrusive-ajax.min.js


      [HttpPost]
        public ActionResult Index(NewBankUser data)
        {
            if (ModelState.IsValid)
            {
                try
                {
                    if (bll.CreateNewBankUser(data))
                    {
                        TempData["OperationMessage"] = "New Bank User is created...";
                        return RedirectToAction("Index", "UserLogin");
                    }
                    // DataException
                    else
                    {
                        TempData["OperationMessage"] = "DataException...";
                        return View();
                    }
                }
                // DataException
                catch (DataException dex)
                {
                    TempData["OperationMessage"] = "DataException" + dex.Message;
                    return View();
                }
            }
            // Model Error
            else
            {
                // if u r here then it's Page PostBack and u will get all Model errors
                // as per configuration in db Model or POCO
                // u can be here if client side validation is OFF in web.config
                /*
                <add key="ClientValidationEnabled" value="false" />
                <add key="UnobtrusiveJavaScriptEnabled" value="false" />
                */
                Get_ListItems();
                TempData["OperationMessage"] = "Model ERROR...Try again...";
                return View();
            }
            
        }
      private  void Get_ListItems()
        {
            List<SelectListItem> Nationality = new List<SelectListItem>();
            SelectListItem item1 = new SelectListItem();
            item1.Text = "Canadian";
            item1.Value = "1";
            SelectListItem item2 = new SelectListItem();
            item2.Text = "Indian";
            item2.Value = "2";
            Nationality.Add(item1);
            Nationality.Add(item2);

            ViewData["Nationality"] = Nationality;
        }

@using (Html.BeginForm()) {
    @Html.ValidationSummary(true)

    <fieldset>
        <legend>Create New Bank User</legend>

        <div class="editor-label">
            @Html.LabelFor(model => model.FirstName)
        </div>
        <div class="editor-field">
            @Html.EditorFor(model => model.FirstName)
            @Html.ValidationMessageFor(model => model.FirstName)
        </div>
        <div class="editor-label">
            @Html.LabelFor(model => model.LastName)
        </div>
        <div class="editor-field">
            @Html.EditorFor(model => model.LastName)
            @Html.ValidationMessageFor(model => model.LastName)
        </div>
        
        <div class="editor-label">
            @Html.LabelFor(model => model.UserName)
        </div>
        <div class="editor-field">
            @Html.EditorFor(model => model.UserName)
            @Html.ValidationMessageFor(model => model.UserName)
        </div>
        <div class="editor-label">
            @Html.LabelFor(model => model.Password)
        </div>
        <div class="editor-field">
            @Html.EditorFor(model => model.Password)
            @Html.ValidationMessageFor(model => model.Password)
        </div>

        <div>
                Date of Birth : 
                @Html.TextBoxFor(model => model.DOB, new { id = "fcukdp" })        
                @Html.ValidationMessageFor(model => model.DOB)
        </div>


        <div>
            Nationality : 
            @Html.DropDownList("Nationality",(List<SelectListItem>)ViewData["Nationality"]) 
        </div>

        <p>
            <input type="submit" value="Create" id="btnSubmit" />            
        </p>
    </fieldset>
}
----------------
jquery datepicker:
<link type="text/css" href="http://code.jquery.com/ui/1.10.3/themes/smothness/jquery-ui.css" rel="stylesheet" />
<script src="http://code.jquery.com/ui/1.10.3/jquery-ui.js"></script>
@Styles.Render("~/Content/themes/base/css") 
-----------
GridMvc:
install package GridMvc
@using GridMvc.Html;
<div id="bankusers" class="MVCGRID">
    <div style="width:500px;">
        @Html.Grid(Model.BankUser_GV_).Columns(columns => 
                    {
                        columns.Add(c => c.BankUserID).Titled("BankUser ID");
                        columns.Add(c => c.FirstName).Titled("FirstName").Filterable(true);
                        columns.Add(c => c.LastName).Titled("LastName").Filterable(true);
                        columns.Add(c => c.DOB).Titled("Date Of Birth").Filterable(true);
                        columns.Add(c => c.UserName).Titled("UserName").Filterable(true);                        
                    }).Sortable(true).SetRowCssClasses(c => (c.FirstName=="" || c.FirstName==null) ? "emptyFirstName" : string.Empty)
    </div>
</div>
    [HttpGet]
        public ActionResult Index()
        {
            BankUsers_GV model = new BankUsers_GV();
            // select list
            Get_ListItems();

            List<BankUser_GV_> datas = GetDatas();
            model.BankUser_GV_ = datas;
            model.NewBankUser = new NewBankUser();
            return View(model);
        }
-------------------
basic login flow:
using session to store login data
     [HttpGet]
        public ActionResult Index()
        {
            return View();
        }

        [HttpPost]
        public ActionResult Index(LoginType data)
        {
            // check for Model Validation, and if OK then go for db validation
            if (ModelState.IsValid)
            {
                if (ValidateLogin(data))
                {
                    return RedirectToAction("Index", "Home");
                }
                else
                {
                    TempData["OperationMessage"] = "Incorrect Login...";
                    return View(data);
                }
            }
            else
            {
                return View(data);
            }
        }

        [NonAction]
        private bool ValidateLogin(LoginType data)
        {
            int BankUserID_ = bll.ValidateLogin(data);
            if (BankUserID_ >= 1)
            {
                SessionLogin sessionData = new SessionLogin();
                sessionData.BankUserID = BankUserID_;
                sessionData.LoginTime = DateTime.Now;
                sessionData.UserName = data.UserName;
                Session["SessionLogin"] = sessionData;
                return true;
            }
            else
            {
                Session["SessionLogin"] = null;
                return false;
            }
        }
<h2>User Login</h2>

@using (Html.BeginForm())
{
    @Html.ValidationSummary(true);
    <div>
        <fieldset>
            <legend>Bank User Login</legend>
            <div class="editor-label">
                @Html.LabelFor(u => u.UserName)
            </div>
            <div class="editor-field">
                @Html.TextBoxFor(u => u.UserName)
                @Html.ValidationMessageFor(u => u.UserName)
            </div>
            <div class="editor-label">
                @Html.LabelFor(u => u.Password)
            </div>
            <div class="editor-field">
                @Html.PasswordFor(u => u.Password)
                @Html.ValidationMessageFor(u => u.Password)
            </div>

            <input type="submit" value="Login" />
        </fieldset>
    </div>
}

<div id ="CreateNewUser">
    @Html.ActionLink("Create New User", "Index", "UserCreate")
</div>

-------------------
C:\DONE\CD-DEC\5-7\FCUKBank_MVC\FCUKBank_MVC
chatwindow
create account
transaction node1
crystal reports
jquery datatable
multilanguage (resource)
custom pager control
GridMvc control to display collection in grid at razor view
using session to login and store login data to session for further access to controllers
------------
C:\DONE\CD-DEC\5-14\5-14\5-14
wcf
windows client(multithreading - background worker)
console application with service reference
console application with service host
            ServiceHost host = new ServiceHost(typeof(FCUKBank_WCF_Lib.StudentService),
            new Uri("http://localhost:1054/WCF_ConsoleHosting/StudentService.svc"));
            host.Open();            
            Console.WriteLine("StudentService is now running. ")		 	             host.Close();           
---------
C:\DONE\CD-DEC\6-2\BankTransaction\BankTransaction\ChartApp
iTextSharp (pdf generation-report)
aspx
google chartapi
web method
   [WebMethod]
        public static List<YearlyData> BindYearChart()
        {
            return new Operations().BindYearChart();
        }

        [WebMethod]
        public static List<QuartelyData> BindQuarterChart(string YearVal)
        {
            int YearValint = System.Convert.ToInt32(YearVal);
            return new Operations().BindQuarterChart(YearValint);
        }
                
        [WebMethod]
        public static List<QuartelyDataPie> BindQuarterChartPie(string YearVal)
        {            
            return new Operations().BindQuarterChartPie(YearVal);
        }
        
        [WebMethod]
        public static List<YearlyQuarterly> BindYearlyQuarterlyChart()
        {
            return new Operations().BindYearlyQuarterlyChart();
        }
     
linq group by function
public void GenerateData()
        {
            Random rand = new Random();
            using (db)
            {
                for (int i = 0; i < 1250; i++)
                {
                    db.SalesInfoes.Add(new SalesInfo { SaleDate = DateTime.Now.AddDays(-1 * i), SaleAmt = rand.Next(100, 1000) });
                }
                db.SaveChanges();
            }
        }
        public List<YearlyData> BindYearChart()
        {
            List<YearlyData> datas = new List<YearlyData>();
            var dataG = (from item in db.SalesInfoes 
                        group item by item.SaleDate.Year into g
                        select new { Year = g.Key, SaleAmt = g.Sum(x => x.SaleAmt) });

            foreach (var item in dataG)
            {
                YearlyData data = new YearlyData();
                data.Year = item.Year;
                data.SaleAmt = item.SaleAmt;
                datas.Add(data);
            }
            return datas;
        }
        public List<QuartelyData> BindQuarterChart(int year)
        {
            List<QuartelyData> datas = new List<QuartelyData>();
            Dictionary<int, int> data = new Dictionary<int, int>();

            //Set X axis data
            // set quarter value like 1,2,3,4
            for (int i = 1; i <= 4; i++)
            {
                data.Add(i, 0);
            }
            var amts = (from item in db.SalesInfoes
                        where item.SaleDate.Year == year
                        group item by ((item.SaleDate.Month - 1) / 3) + 1 into g
                        select new { Quarter = g.Key, SaleAmt = g.Sum(x => x.SaleAmt) });

            //Set Y axis values
            // set value on y axis means value for each quarter
            foreach (var item in amts)
            {
                data[item.Quarter] = Convert.ToInt32(item.SaleAmt);
            }

            foreach (var k in data)
            {
                QuartelyData dataVal = new QuartelyData();
                dataVal.Quarter = k.Key;
                dataVal.SaleAmt = k.Value;
                datas.Add(dataVal);
            }
            return datas;
        }
        public List<QuartelyDataPie> BindQuarterChartPie(string year)
        {
            int yearInt = System.Convert.ToInt32(year);
            List<QuartelyDataPie> datas = new List<QuartelyDataPie>();
            Dictionary<string, int> data = new Dictionary<string, int>();

            //Set X axis data
            // set quarter value like 1,2,3,4
            for (int i = 1; i <= 4; i++)
            {
                data.Add(i.ToString(), 0);
            }
            var amts = (from item in db.SalesInfoes
                        where item.SaleDate.Year == yearInt
                        group item by ((item.SaleDate.Month - 1) / 3) + 1 into g
                        select new { Quarter = g.Key, SaleAmt = g.Sum(x => x.SaleAmt) });

            //Set Y axis values
            // set value on y axis means value for each quarter
            foreach (var item in amts)
            {
                data[item.Quarter.ToString()] = Convert.ToInt32(item.SaleAmt);
            }

            foreach (var k in data)
            {
                QuartelyDataPie dataVal = new QuartelyDataPie();
                dataVal.Quarter = k.Key;
                dataVal.SaleAmt = k.Value;
                datas.Add(dataVal);
            }
            return datas;
        }
        public List<YearlyQuarterly> BindYearlyQuarterlyChart()
        {
            List<YearlyQuarterly> datas = new List<YearlyQuarterly>();
            
            var myList = db.SalesInfoes
                            .GroupBy(d => d.SaleDate.Year)
                            .Select(group => group.FirstOrDefault());

            foreach (var y in myList.OrderBy(l=>l.SaleDate.Year))
            {
                // System.Console.WriteLine(y.SaleDate.Year);
                int year = y.SaleDate.Year;
                var amts = (from item in db.SalesInfoes
                            where item.SaleDate.Year == year
                            group item by ((item.SaleDate.Month - 1) / 3) + 1 into g
                            select new { Quarter = g.Key, SaleAmt = g.Sum(x => x.SaleAmt) });
                YearlyQuarterly yqdata = new YearlyQuarterly();
                yqdata.Year = year.ToString();
                if (year <= 2010)
                {
                    yqdata.Tooltip = "http://upload.wikimedia.org/wikipedia/commons/2/28/Flag_of_the_USA.svg";
                }
                else if (year <= 2011)
                {
                    yqdata.Tooltip = "http://upload.wikimedia.org/wikipedia/commons/f/fa/Flag_of_the_People%27s_Republic_of_China.svg";
                }
                else if (year <= 2012)
                {
                    yqdata.Tooltip = "http://upload.wikimedia.org/wikipedia/commons/a/ae/Flag_of_the_United_Kingdom.svg";
                }
                else if (year <= 2013)
                {
                    yqdata.Tooltip = "http://upload.wikimedia.org/wikipedia/commons/2/28/Flag_of_the_USA.svg";
                }
                else if (year <= 2014)
                {
                    yqdata.Tooltip = "http://upload.wikimedia.org/wikipedia/commons/f/fa/Flag_of_the_People%27s_Republic_of_China.svg";
                }
                
                foreach (var item in amts)
                {
                    if (item.Quarter <= 1)
                    {                        
                        yqdata.Quarter1 = Convert.ToInt32(item.SaleAmt);
                    }
                    else if (item.Quarter <= 2)
                    {
                        yqdata.Quarter2 = Convert.ToInt32(item.SaleAmt);
                    }
                    else if (item.Quarter <= 3)
                    {
                        yqdata.Quarter3 = Convert.ToInt32(item.SaleAmt);
                    }
                    else if (item.Quarter <= 4)
                    {
                        yqdata.Quarter4 = Convert.ToInt32(item.SaleAmt);
                    }
                }
                datas.Add(yqdata);
            }
            return datas;
        }
---------
C:\DONE\CD-DEC\6-2\BankTransaction\BankTransaction\jQGridProject
jquery grid control
jqGrid
CRUD,sorting,paging,master detail
<script src="/Scripts/jquery.jqGrid.min.js" type="text/javascript"></script>
.... few more

sorting and paging at server:
controller:
      // it will handle sorting and paging at DAL layer (WCF)
        public ActionResult GridDataMaster_(string sidx, string sord, int page, int rows)
        {
            List<StudentPOCO> datas = client.MDGetAllStudents_(sidx,sord,page,rows).ToList();

            int pageIndex = Convert.ToInt32(page) - 1;
            int pageSize = rows;
            int totalRecords = client.MDCountTotal_();
            int totalPages = (int)Math.Ceiling((float)totalRecords / (float)pageSize);

            var jsonData = new
            {
                total = totalPages,
                page = page,
                records = totalRecords,
                rows = (
                from std in datas
                select new
                {
                    id = std.StudentID,
                    cell = new string[] { 
                      std.StudentID.ToString(), std.FirstMidName, std.LastName 
                    }
                }).ToArray()
            };
            return Json(jsonData, JsonRequestBehavior.AllowGet);
        }
        public ActionResult GridDataDetail_(int id, string sidx, string sord, int page, int rows)
        {
            List<EnrollmentPOCO> datas = client.MDGetAllEnrollments_(id, sidx, sord, page, rows).ToList();

            int pageIndex = Convert.ToInt32(page) - 1;
            int pageSize = rows;
            int totalRecords = client.MDEnrollmentsCountTotal_(id);
            int totalPages = (int)Math.Ceiling((float)totalRecords / (float)pageSize);

            var jsonData = new
            {
                total = totalPages,
                page = page,
                records = totalRecords,
                rows = (
                from en in datas
                select new
                {
                    id = en.EnrollmentID,
                    cell = new string[] { 
                      en.EnrollmentID.ToString(), en.CourseID.ToString(), en.Grade.ToString() 
                    }
                }).ToArray()
            };
            return Json(jsonData, JsonRequestBehavior.AllowGet);
        }
DAL:
// master detail jQGrid with paging and sorting at WCF (DAL)
        public List<StudentPOCO> MDGetAllStudents_(string sidx, string sord, int page, int rows)
        {
            List<StudentPOCO> datas = new List<StudentPOCO>();

            int pageIndex = Convert.ToInt32(page) - 1;
            int pageSize = rows;
            
            var stds = db.Students;
            if (stds != null)
            {
                if (stds.Count() >= 1)
                {
                    IEnumerable<Student> datas_ = stds;
                    if (sidx.ToString() == "FirstMidName" && sord.ToString() == "asc")
                    {
                        datas_ = stds.OrderBy(d => d.FirstMidName)
                                    .Skip(pageIndex * pageSize)
                                    .Take(pageSize);
                    }
                    else if (sidx.ToString() == "FirstMidName" && sord.ToString() == "desc")
                    {
                        datas_ = stds.OrderByDescending(d => d.FirstMidName)
                                    .Skip(pageIndex * pageSize)
                                    .Take(pageSize);
                    }
                    else if (sidx.ToString() == "LastName" && sord.ToString() == "asc")
                    {
                        datas_ = stds.OrderBy(d => d.LastName)
                                    .Skip(pageIndex * pageSize)
                                    .Take(pageSize);
                    }
                    else if (sidx.ToString() == "LastName" && sord.ToString() == "desc")
                    {
                        datas_ = stds.OrderByDescending(d => d.FirstMidName)
                                    .Skip(pageIndex * pageSize)
                                    .Take(pageSize);
                    }
                    else if (sidx.ToString() == "StudentID" && sord.ToString() == "asc")
                    {
                        datas_ = stds.OrderBy(d => d.StudentID)
                                    .Skip(pageIndex * pageSize)
                                    .Take(pageSize);
                    }
                    else if (sidx.ToString() == "StudentID" && sord.ToString() == "desc")
                    {
                        datas_ = stds.OrderByDescending(d => d.StudentID)
                                    .Skip(pageIndex * pageSize)
                                    .Take(pageSize);
                    }
                    foreach (var s in datas_)
                    {
                        StudentPOCO data = new StudentPOCO();
                        data.StudentID = s.StudentID;
                        data.FirstMidName = s.FirstMidName;
                        data.LastName = s.LastName;
                        datas.Add(data);
                    }
            
                }
                else
                {
                    // do nothing, coz' 0 record
                }
            }
            else
            {
                // do nothing, coz' 0 record
            }
            return datas;
        }
        public int MDCountTotal_()
        {
            var stds = db.Students;
            if (stds != null)
            {
                if (stds.Count() >= 1)
                {
                    return stds.Count();
                }
                else
                {
                    return 0;
                }
            }
            else
            {
                return 0;
            }            
        }
        public List<EnrollmentPOCO> MDGetAllEnrollments_(int SID, string sidx, string sord, int page, int rows)
        {
            List<EnrollmentPOCO> datas = new List<EnrollmentPOCO>();
            
            int pageIndex = Convert.ToInt32(page) - 1;
            int pageSize = rows;

            var ens = db.Enrollments
                        .Where(en => en.StudentID == SID);
            if (ens != null)
            {
                if (ens.Count() >= 1)
                {
                    IEnumerable<Enrollment> datas_ = ens;
                    if (sidx.ToString() == "CourseID" && sord.ToString() == "asc")
                    {
                        datas_ = ens.OrderBy(d => d.CourseID)
                                    .Skip(pageIndex * pageSize)
                                    .Take(pageSize);
                    }
                    else if (sidx.ToString() == "CourseID" && sord.ToString() == "desc")
                    {
                        datas_ = ens.OrderByDescending(d => d.CourseID)
                                    .Skip(pageIndex * pageSize)
                                    .Take(pageSize);
                    }
                    else if (sidx.ToString() == "EnrollmentID" && sord.ToString() == "asc")
                    {
                        datas_ = ens.OrderBy(d => d.EnrollmentID)
                                    .Skip(pageIndex * pageSize)
                                    .Take(pageSize);
                    }
                    else if (sidx.ToString() == "EnrollmentID" && sord.ToString() == "desc")
                    {
                        datas_ = ens.OrderByDescending(d => d.EnrollmentID)
                                    .Skip(pageIndex * pageSize)
                                    .Take(pageSize);
                    }

                    foreach (var s in datas_)
                    {
                        EnrollmentPOCO data = new EnrollmentPOCO();
                        data.EnrollmentID = s.EnrollmentID;
                        data.CourseID = s.CourseID;
                        if (s.Grade != null)
                        {
                            data.Grade = (int)s.Grade;
                        }
                        else
                        {
                            data.Grade = 0;
                        }
                        datas.Add(data);
                    }
                }
                else
                {
                    // do nothing, coz' 0 record
                }
            }
            else
            {
                // do nothing, coz' 0 record
            }
            return datas;
        }
        public int MDEnrollmentsCountTotal_(int id)
        {
            var ens = db.Enrollments
                        .Where(en=>en.StudentID==id);
            if (ens != null)
            {
                if (ens.Count() >= 1)
                {
                    return ens.Count();
                }
                else
                {
                    return 0;
                }
            }
            else
            {
                return 0;
            }
        }
----------------
C:\DONE\CD-DEC\6-2\BankTransaction\BankTransaction\MvcPagingDemo
mvc paging using bootstrap - ajax based paging in mvc
install package MvcPaging
----------
C:\DONE\CD-DEC\6-2\BankTransaction\BankTransaction\ProjectCopy
project copy - directory copy - recursive copy
class Program
    {

        static void Main(string[] args)
        {
            
            string source = @"C:\practice\MessageSYS";
            string dest = @"C:\practice\MessageSYS1";
            DirectoryInfo sdir = new DirectoryInfo(source);
            DirectoryInfo ddir = new DirectoryInfo(dest);
            CopyFilesRecursively(sdir, ddir);

        }

        public static void CopyFilesRecursively(DirectoryInfo source, DirectoryInfo target)
        {
            string[] extensions = new[] { ".aspx", ".cs", ".edmx", ".config", ".dll", ".edmx", ".png", ".js", ".css", ".cshtml", ".html", ".xml", ".jpg", ".gif", ".master", ".txt", ".ascx", ".ico", ".sql", ".tt", ".diagram", ".json", ".md","map" };
    
            foreach (DirectoryInfo dir in source.GetDirectories())
            {
                
                System.Console.WriteLine("dir--->"+dir.FullName);
                CopyFilesRecursively(dir, target.CreateSubdirectory(dir.Name));
            }

            /*
            foreach (FileInfo file in source.GetFiles())
            {
                System.Threading.Thread.Sleep(1000);
                System.Console.WriteLine("file--->>>" + file.FullName);
                file.CopyTo(Path.Combine(target.FullName, file.Name));
            }
            */
            foreach (FileInfo file in source.GetFiles().Where(f => extensions.Contains(f.Extension.ToLower()))
         .ToArray())
            {
                
                System.Console.WriteLine("file--->>>" + file.FullName);
                file.CopyTo(Path.Combine(target.FullName, file.Name));
            }
            
            
        }

    }
----------------
C:\DONE\CD-DEC\6-2\BankTransaction\BankTransaction\WCF_WebClient
aspx
updatepanel
formview
gridview
rowcommand
rowdatabound
rowdeleting
selectedindexchanged
gridview paging
dropdownlist
Display GridView Row Details in Modal Dialog using Twitter Bootstrap
Bootstrap Pagination for ASP.NET GridView
client side event binding for servercontrol using attributes
	amounttextbox.Attributes.Add("onblur", "Validate();");

-------------
C:\DONE\CD-DEC\6-9\CRUDWithAjax\CRUDWithAjax
mvc CRUD using jquery dialog (no model validation)
xml file as database
------------
C:\DONE\CD-DEC\6-16\MVCStudentBankTR\MVCStudentBankTR\MVCStudentBankTR
model error
[HttpPost]
        public JsonResult AddBankUser(BankUser_MV data)
        {
            ModelErrors modelErrors_ = new ModelErrors();
            modelErrors_.ErrorMessagesDic = new Dictionary<string, string>();                

            if (ModelState.IsValid)
            {
                try
                {
                    bll.InsertBankUser(data);
                    return Json(new { Ok = true });
                }
                catch (DataException dex)
                {
                    modelErrors_.ErrorMessagesDic.Add("DataException", "Data Exception : " + dex.Message);
                    return Json(new { Ok = false, ME_JQ = modelErrors_.ErrorMessagesDic });
                }

            }
            else
            {                
                foreach (var item in ViewData.ModelState)
                {
                    if (item.Value.Errors.Any())
                    {
                        // below for multiple errors on single field
                        // like multiple errors on FirstName field
                        foreach (var evalue in item.Value.Errors)
                        {
                            modelErrors_.ErrorMessagesDic.Add(item.Key, evalue.ErrorMessage.ToString());
                        }

                        // below for single error
                        // modelErrors_.ErrorMessagesDic.Add(item.Key, item.Value.Errors.FirstOrDefault().ErrorMessage.ToString());                        
                    }
                }
                return Json(new { Ok = false, ME_JQ = modelErrors_.ErrorMessagesDic });
            }
        }
at client using ajax-json to parse model errors:
 $(document).on('click', '.addformclass', function (evt) {                
                if (buid <= 0) {
                    // add
                    $.ajaxSetup({ cache: false });
                    var BankUser_MV = {
                        FirstName: $('#fn').val(),
                        LastName: $('#ln').val(),
                        Nationality: $('#n').val(),
                        DOB: $('#dob').val()
                    };
                    var ajaxPage = "/BankUser_MV/AddBankUser";
                    $.ajax({
                        type: "POST",
                        url: ajaxPage,
                        data: JSON.stringify(BankUser_MV),
                        contentType: "application/json;charset=utf-8",
                        success: function (data) {
                            if (data.Ok) {
                                // alert('success');
                                GetBankUsers();
                                resetAfterAddUpdate();                             
                            }
                            else {
                                // reset errors on span
                                $('#fns').html('');
                                $('#lns').html('');
                                $('#ns').html('');
                                $('#dobs').html('');

                                // below to display all model errors as list and as span
                                // for individual input field
                                var mediv = $('#modelerrorsdiv');
                                var errors = '';
                                errors = "<ul>";
                                for (keyVar in data.ME_JQ) {
                                    // alert(keyVar + ' : ' + data.ME_JQ[keyVar]);                                    
                                    errors += "<li>" + keyVar + " : " + data.ME_JQ[keyVar] + "</li>";
                                    
                                    if(keyVar=='FirstName')
                                        $('#fns').html("<b>" + data.ME_JQ[keyVar] + "</b>")

                                    if (keyVar == 'LastName')
                                        $('#lns').html("<b>" + data.ME_JQ[keyVar] + "</b>")

                                    if (keyVar == 'Nationality')
                                        $('#ns').html("<b>" + data.ME_JQ[keyVar] + "</b>")

                                    if (keyVar == 'DOB')
                                        $('#dobs').html("<b>" + data.ME_JQ[keyVar] + "</b>")
                                }
                                errors += "</ul>";
                                mediv.html(errors);
                            }
                        },
                        // ajax call error
                        error: function (obj) {
                            alert("ajax call error");
                        }
                    });
                }
                
            });
----------
C:\DONE\CD-DEC\6-16\MVCStudentBankTR\MVCStudentBankTR\MVCStudentBankTR
mvc CRUD using jquery dialog
---------
C:\DONE\CD-DEC\6-16\MVCStudentBankTR\MVCStudentBankTR\MVCStudentBankTR
FileMGTController:display collection of images for student and allow to delete image
display image
  <td align="center" >
                    <img src= "@Url.Content(@ImagePath(@entry.Value))" 
                        alt="Image" width="100px" height="100px" />
                </td>                                                                    @functions{
public string ImagePath(string ImageName)
{
    return "~/AjaxUpload/" + ImageName;
}
}

ajax fileupload with text content:

        // ajax file upload with text content to Student1ImageM db table
        public JsonResult FileUploadwithText()
        {
            // System.Threading.Thread.Sleep(4000);
                       
            var request = Request;
            
            int StudentID = Convert.ToInt32(request["StudentID"]);
            if (StudentID <= 0)
            {
                ajaxMessage.Status = false;
                ajaxMessage.StatusCode = 5;
                ajaxMessage.StatusMessage = "You have to select Student Name before ajax file upload";
                return Json(new { Result = ajaxMessage });
            }


            string Message = request["TextContent"].Trim();
            if (Message.Length >= 51)
            {
                ajaxMessage.Status = false;
                ajaxMessage.StatusCode = 4;
                ajaxMessage.StatusMessage = "Message can not be more than 50 characters";
                return Json(new { Result = ajaxMessage });
            }

            DateTime DateCreated = DateTime.Now;
            try
            {
                FileUpload_Text data = new FileUpload_Text();
                data.StudentID = StudentID;
                data.DateCreated = DateCreated;
                data.Message = Message;
                if (request.Files.Count > 0)
                {
                    // here filePath is physical path
                    var postedFile = request.Files[0];
                    var filePath = Server.MapPath("~/AjaxUpload/" + postedFile.FileName);

                    // first save file to file system
                    postedFile.SaveAs(filePath);

                    data.ImageName = postedFile.FileName;

                    // then send text and file to db
                    bll.SendTextWithFile(data);

                    ajaxMessage.Status = true;
                    ajaxMessage.StatusCode = 0;
                    ajaxMessage.StatusMessage = "Text with File Added Successfully";
                }
                // no file attachment, so must return coz' record can not be added to table
                // if FileName is null. (FileName not null)
                else
                {
                    ajaxMessage.Status = false;
                    ajaxMessage.StatusCode = 1;
                    ajaxMessage.StatusMessage = "File Attachment can not be null";
                }
                return Json(new { Result = ajaxMessage });
            }
            catch (DataException dex)
            {
                ajaxMessage.Status = false;
                ajaxMessage.StatusCode = 2;
                ajaxMessage.StatusMessage = "Data Exception : " + dex.Message;
            }
            catch (Exception ex)
            {
                ajaxMessage.Status = false;
                ajaxMessage.StatusCode = 3;
                ajaxMessage.StatusMessage = "Exception : " + ex.Message;
            }
            return Json(new { Result = ajaxMessage });
        }
// send text with file
            $("#btnSubmit").click(function () {
                var formData = new FormData();
                var opmlFile = $('#me')[0];
                var StudentID = $('#theSelect :selected').val();
                var TextContent = $('[id$="newtext"]').val().trim();

                formData.append("StudentID", $('#theSelect :selected').val());
                formData.append("TextContent", $('[id$="newtext"]').val());
                formData.append("opmlFile", opmlFile.files[0]);
                $.ajax({
                    url: "/FileUpload_Text/FileUploadwithText",
                    type: 'POST',
                    data: formData,
                    cache: false,
                    contentType: false,
                    processData: false,
                    success: function (data) {
                        if (data.Result.Status == true)
                            op_success(data.Result.StatusMessage);
                        else if (data.Result.Status == false)
                            op_fail(data.Result.StatusMessage);
                        ResetAll();
                        reload();
                    },
                    error: function (data) {
                        op_fail(data.Result);
                        ResetAll();
                    }
                });
            }); // end of function
            
------
C:\DONE\CD-DEC\6-16\MVCStudentBankTR\MVCStudentBankTR\MVCStudentBankTR
FileUpload_TextController
jquery cycle plugin - display dynamic collection of images coming from controller
----
C:\DONE\CD-DEC\6-16\MVCStudentBankTR\MVCStudentBankTR\MVCStudentBankTR
hotmail
---
C:\DONE\CD-DEC\6-16\MVCStudentBankTR\MVCStudentBankTR\MVCStudentBankTR
jquery multi file upload using jquery.fileupload.js
--------
C:\DONE\CD-DEC\6-16\MVCStudentBankTR\MVCStudentBankTR\MVCStudentBankTR
MasterStdController
CRUD on student - enrollment
master detail
custom paging
load students:
    function GetStudents() {
                $.ajax({
                    url: '/MasterStd/GetStudents',
                    contentType: 'application/html; charset=utf-8',
                    type: 'GET',
                    dataType: 'html'
                })
                .success(function (result) {
                    $('#students').html(result);
                })
                .error(function (xhr, status) {
                    alert(status);
                })
            }

edit on student:
$(document).on('click', '.edit', function () {
                $('#AddUpdateBtnE').attr("disabled", "disabled");

                sid = $(this).attr("name");

                // remove class for all tr and then get tr of selected StudentID
                // and apply class to it
                $('tr').removeClass('selectedRow');
                $(this).closest('tr').addClass('selectedRow');

                load_studentdetails(sid);
            });
            function load_studentdetails(sid) {
                var ajaxPage = "/MasterStd/GetStdDetails";
                $.ajax({
                    url: ajaxPage,
                    data: "StudentID=" + sid,
                    dataType: "json",
                    cache: false,
                    success: function (result) {
                        $('#fn').val(result.Records.FirstMidName);
                        $('#ln').val(result.Records.LastName);

                        // jq datepicker
                        // convert c# datetime into jq datepicker
                        var parsedDate = new Date(parseInt(result.Records.EnrollmentDate.substr(6)));
                        alert(parsedDate);
                        var jsDate = new Date(parsedDate); //Date object
                        var day = jsDate.getDate();
                        var month = jsDate.getMonth() + 1;
                        var year = jsDate.getFullYear();
                        var fullDate = day + " / " + month + " / " + year;
                        $('#endate').val(fullDate);

                    },
                    // ajax call error
                    error: function (obj) {
                        alert("ajax call error");
                    }
                });
	}
add or update on student:
// either add or update
            $('#AddUpdateBtn').click(function () {

                $('#AddUpdateBtnE').attr("disabled", "disabled");

                if (sid <= 0) {
                    // add
                    $.ajaxSetup({ cache: false });
                    var StudentAdd = {
                        FirstMidName: $('#fn').val(),
                        LastName: $('#ln').val(),
                        EnrollmentDate: $('#endate').val()
                    };
                    var ajaxPage = "/MasterStd/AddStudent";
                    $.ajax({
                        type: "POST",
                        url: ajaxPage,
                        data: JSON.stringify(StudentAdd),
                        contentType: "application/json;charset=utf-8",
                        success: function (response) {
                            if (response.Result.Status == true) {
                                GetStudents();
                                resetAfterAddUpdate();
                                op_success("Student record successfully added");
                            }
                            else {
                            }
                        },
                        // ajax call error
                        error: function (obj) {
                            alert("ajax call error");
                        }
                    });
                }
                else {
                    // update
                    var StudentUpdate = {
                        StudentID: sid,
                        FirstMidName: $('#fn').val(),
                        LastName: $('#ln').val(),
                        EnrollmentDate: $('#endate').val()
                    };
                    var ajaxPage = "/MasterStd/UpdateStudent";
                    $.ajax({
                        type: "POST",
                        url: ajaxPage,
                        data: JSON.stringify(StudentUpdate),
                        contentType: "application/json;charset=utf-8",
                        success: function (response) {
                            if (response.Result.Status == true) {
                                GetStudents();
                                resetAfterAddUpdate();
                                op_success("Student record successfully updated");
                            }
                            else {
                            }
                        },
                        // ajax call error
                        error: function (obj) {
                            alert("ajax call error");
                        }
                    });
                }
            });
delete on student:
// .delete
            $(document).on('click', '.delete', function () {
                $('.endiv').hide();
                $('#AddUpdateBtnE').attr("disabled", "disabled");
                var id = $(this).attr("name");

                // if (confirm("Sure to delete?")) {
                $.ajaxSetup({ cache: false });
                $.ajax({
                    url: '/MasterStd/DeleteStudent',
                    data: "StudentID=" + id,
                    dataType: "json",
                    cache: false,
                    success: function (result) {
                        GetStudents();
                        resetAfterAddUpdate();
                        op_success("Student record successfully deleted");
                    },
                    // ajax call error
                    error: function (obj) {
                        alert("ajax call error");
                    }

                });
                // }
            });
---------------------
C:\DONE\CD-DEC\6-16\MVCStudentBankTR\MVCStudentBankTR\MVCStudentBankTR
ajax multi file upload
<div id="fileupload1div">
    <form id="uploader">
        <input id="fileInput" type="file" multiple>
        <input type="submit" value="Upload file" />
    </form>
</div>

 $(document).ready(function () {
            document.getElementById('uploader').onsubmit = function () {
                var formdata = new FormData(); //FormData object
                var fileInput = document.getElementById('fileInput');
                //Iterating through each files selected in fileInput
                for (i = 0; i < fileInput.files.length; i++) {
                    //Appending each file to FormData object
                    formdata.append(fileInput.files[i].name, fileInput.files[i]);
                }
                //Creating an XMLHttpRequest and sending
                var xhr = new XMLHttpRequest();
                xhr.open('POST', '/MultiFileUpload/Upload');
                xhr.send(formdata);
                xhr.onreadystatechange = function () {
                    if (xhr.readyState == 4 && xhr.status == 200) {
                        alert(xhr.responseText);                        
                    }
                }         
                return false;
            }

        });
             
        public JsonResult Upload()
        {
            for (int i = 0; i < Request.Files.Count; i++)
            {
                HttpPostedFileBase file = Request.Files[i]; //Uploaded file
                //Use the following properties to get file's name, size and MIMEType
                int fileSize = file.ContentLength;
                string fileName = file.FileName;
                string mimeType = file.ContentType;
                System.IO.Stream fileContent = file.InputStream;
                //To save file, use SaveAs method
                file.SaveAs(Server.MapPath("~/AjaxUploadMulti/") + fileName); //File will be saved in application root
            }
            return Json("Uploaded " + Request.Files.Count + " files");
        }
----------
C:\DONE\CD-DEC\6-16\MVCStudentBankTR\MVCStudentBankTR\MVCStudentBankTR
Traditional_MVController
model validation using form.valid() jquery method
----------
C:\DONE\CD-DEC\7-12\APIStudentBankTR\APIStudentBankTR\APIStudentBankTR
api:
  public HttpResponseMessage GetEnrollmentbyID(int id)
        {
            EnrollmentT enr = bll.GetENDetails(id);
            if (enr == null)
            {
                return Request.CreateErrorResponse(HttpStatusCode.NotFound, "Details Not found for the Given EID");
            }
            else
            {
                return Request.CreateResponse(HttpStatusCode.OK, enr);
            }
        }

          public HttpResponseMessage PutStudent(int id, StudentT student)
        {
            student.StudentID = id;

            if (ModelState.IsValid)
            {
                if (!bll.UpdateStudent(student))
                {
                    return Request.CreateErrorResponse(HttpStatusCode.NotFound, "Db Update Error ... Unable to Update");
                }
                else
                {
                    return Request.CreateResponse(HttpStatusCode.OK);
                }
            }
            else
            {
                return Request.CreateErrorResponse(HttpStatusCode.BadRequest, ModelState);
            }
        }

how to parse xml coming from api:
     public List<StudentT> GetAllStudentsXML()
        {
            return bll.Get_AllStudents().ToList();
        }   
// expecting response as xml
            // here dataType is specified as xml
            GetAllStudents();
            function GetAllStudents() {
                jQuery.support.cors = true;
                $.ajax({
                    url: '/api/ResFormatter',
                    type: 'GET',
                    dataType: 'xml',
                    ContentType: "application/rss+xml",
                    success: xmlParser,                    
                    error: function (x, y, z) {
                        alert(x + '\n' + y + '\n' + z);
                    }
                });
            }
            function xmlParser(data) {
                xml = data;
                var strResult = "<table><th>StudentID</th><th>FirstMidName</th><th>LastName</th><th>EnrollmentDate</th>";
                $(xml).find("StudentT").each(function () {                    
                    var fname = $(this).find("FirstMidName").text();
                    var lname = $(this).find("LastName").text();
                    var enrdate = $(this).find("EnrollmentDate").text();
                    var enrdatestr = $(this).find("EnrollmentDateStr").text();
                    var sid = $(this).find("StudentID").text();
                    strResult += "<tr><td> " + sid + "</td><td>" + fname + "</td><td> " + lname + "</td><td> " + enrdatestr + "</td></tr>"                    
                });
                strResult += "</table>";
                $("#students").html(strResult);
            }   
model validation in api:
public HttpResponseMessage PostBankUser_MV_TR(BankUser_MV_TR bankuser)
        {
            if (ModelState.IsValid)
            {
                try
                {
                    bankuser = bll.InsertBankUser_MV_TR(bankuser);
                    var response = Request.CreateResponse(HttpStatusCode.Created);
                    string uri = Url.Link("DefaultApi", new { id = bankuser.BankUserID });
                    response.Headers.Location = new Uri(uri);
                    return response;
                }
                // db exceptions
                catch (DBConcurrencyException dbcex)
                {
                    return Request.CreateErrorResponse(HttpStatusCode.InternalServerError, dbcex.Message);
                }
                catch (DbUpdateException dbuex)
                {
                    return Request.CreateErrorResponse(HttpStatusCode.InternalServerError, dbuex.Message);
                }                
            }
            // model error
            // server side model validation gets fail
            else
            {
                return Request.CreateErrorResponse(HttpStatusCode.BadRequest, ModelState);
            }
        }        

parse model error at client coming from api:
       $.ajax({
                        url: '/api/Traditional_MV/',
                        type: 'POST',
                        data: JSON.stringify(BankUser_MV_TR),
                        contentType: "application/json;charset=utf-8",
                        success: function (data) {
                            GetAllBankUsers();
                            op_success("BankUser added Successfully");
                            $('#Nspan').html('');
                            $('#ModelErrors').html('');
                        },
                        error: function (xhr, ajaxOptions, data) {
                            // server side model validation fails
                            if (xhr.status == 400) {
                                var validationErrors = $.parseJSON(xhr.responseText);
                                op_fail("Model Errors ... Unable to Add");
                                showModelErrors(validationErrors.ModelState);
                            }
                            // db exceptions
                            else if (xhr.status == 500) {
                                op_fail(xhr.status + " : " + xhr.statusText + " : " + xhr.responseText.substring(xhr.responseText.indexOf(':') + 2, xhr.responseText.length - 2));
                            }
                        }
                    });
      // display model errors from controller to UI
            function showModelErrors(data) {
                var strResult = "<ul>";
                $.each(data, function (index, value) {
                    strResult += "<li> " + value + "</li>"
                });
                strResult += "</ul>";
                $("#ModelErrors").html(strResult);
            }

create table on client side and handle event for CRUD:
     function WriteResponses(students) {
                var strResult = "<table><th>StudentID</th><th>FirstMidName</th><th>LastName</th><th>EnrollmentDate</th>";
                $.each(students, function (index, student) {
                    strResult += "<tr><td> " + student.StudentID + "</td><td>" + student.FirstMidName + "</td><td> " + student.LastName + "</td><td> " + student.EnrollmentDateStr + "</td>";
                    strResult += "<td><input type='button' value='Delete' name='" + student.StudentID + "' class='delete'  /></td>"
                    strResult += "<td><input type='button' value='En Details' name='" + student.StudentID + "' class='detail'  /></td>"
                    strResult += "<td><input type='button' value='Edit' name='" + student.StudentID + "' class='edit'  /></td></tr>"
                });
                strResult += "</table>";
                $("#students").html(strResult);
            }
     // .edit
            $(document).on('click', '.edit', function () {

                ResetAllE();

                // remove class for all tr                
                $('tr').removeClass('selectedRow');

                var id = $(this).attr("name");
                GetStudent(id);
            });
            //Get a Particular Student based on ID for edit
            function GetStudent(id) {
                jQuery.support.cors = true;
                $.ajax({
                    url: '/api/MasterStd/' + id,
                    type: 'GET',
                    dataType: 'json',
                    success: function (result) {
                        first.val(result.FirstMidName);
                        last.val(result.LastName);
                        endate.val(result.EnrollmentDateStr);
                        sid = result.StudentID;
                    },
                    error: function (xhr, ajaxOptions, thrownError) {
                        if (xhr.status == 404) {
                            op_fail(xhr.status + " : " + xhr.statusText + " : " + xhr.responseText.substring(xhr.responseText.indexOf(':') + 2, xhr.responseText.length - 2));
                        }
                    }
                });
            } // end of function
-----------
C:\DONE\CD-DEC\7-12\APIStudentBankTR\APIStudentBankTR\Client4API
aspx client to api
bind event on client side jquery html table:
           function WriteResponses_SelectList(datas) {
                var htmlTable = "<p></p><table border='1' bgcolor='yellow' id='maintran' >";
                htmlTable += "<tr><th>TranMain#</th><th>ActionType#</th><th>Node Status</th><th>Amount</th><th>From AC#</th><th>To AC#</th><th>Flag 4 To AC#</th><th>Delete Main/Detail Transactions</th></tr>";
                if (datas.length >= 1) {
                    $.each(datas, function (index, data) {
                        if (data.FlagToACID == true) {
                            // ok to display image for getting detail transactions, to change node status
                            htmlTable += "<tr><td class='field1'>" + data.TranMainID + "</td><td>" + data.ActionTypeID + "</td><td>" + data.NodeStatus + "</td><td>" + data.Amount + "</td><td>" + data.FromACID + "</td><td>" + data.ToACID + "</td><td>" + data.FlagToACID + "</td><td><img  width='30px' height='30px' src='image/error.png' class='btnGetDetailTrans' id='" + data.TranMainID + "' /></td></tr>";
                        }
                        else {
                            // not ok to display image for getting detail transactions, to change node status
                            // because to account id does not exist at this time
                            // so u don't have to change node status for this main and it's 
                            // related detail transactions
                            htmlTable += "<tr><td class='field1'>" + data.TranMainID + "</td><td>" + data.ActionTypeID + "</td><td>" + data.NodeStatus + "</td><td>" + data.Amount + "</td><td>" + data.FromACID + "</td><td>" + data.ToACID + "</td><td>" + data.FlagToACID + "</td><td><img  width='30px' height='30px' src='image/error.png' class='btnCanNotGetDetailTrans' id='" + data.TranMainID + "' /></td></tr>";
                        }

                    });
                    htmlTable += "</table>";
                }
                else {
                    htmlTable += "</table>";
                    htmlTable += "<p><b>No Main Trasaction Found With NodeStatus...Not Clear</b></p>";
                }
                $('#mainTRdiv').html(htmlTable);
                $(".btnGetDetailTrans").bind("click", GetDetailTransactions);
                $(".btnCanNotGetDetailTrans").bind("click", CanNotGetDetailTransactions);
            }
        }
    function CanNotGetDetailTransactions() {
            $('#opmsgiv').html("<p><b>To Account ID does not exist at this time, so you can not Delete Main Transaction and it's Detail Transactions</b></p>");
            $('#detailTRdiv').html('');
        }
        function GetDetailTransactions() {
            $('#opmsgiv').html('');
            var par = $(this).parent().parent(); //tr 
            var tdTranMainID = par.children("td:nth-child(1)").text();

            MTRIDdelete = tdTranMainID;

            load_detailtrs_4(tdTranMainID);
        }
     
bind event on client side jquery gridview:      
     function WriteResponses_SelectList(datas) {
                if (datas.length >= 1) {
                    var row = $("[id*=maintrgv] tr:last-child").clone(true);
                    $("[id*=maintrgv] tr").not($("[id*=maintrgv] tr:first-child")).remove();
                    $.each(datas, function (key, val) {
                        $("td", row).eq(0).html(val.TranMainID);
                        $("td", row).eq(1).html(val.ActionTypeID);
                        $("td", row).eq(2).html(val.NodeStatus);
                        $("td", row).eq(3).html(val.Amount);
                        $("td", row).eq(4).html(val.FromACID);
                        $("td", row).eq(5).html(val.ToACID);
                        $("td", row).eq(6).html(val.FlagToACID + "");
                        if (val.FlagToACID == true) {
                            // ok to get detail transaction
                            var deleteCol = "<input type='button' value='Show Detail Trs' name='" + val.TranMainID + "' class='detailtr'  />";
                        }
                        else {
                            // not ok to get detail transaction, coz' ToACID at this time does not exist
                            var deleteCol = "<input type='button' value='Show Detail Trs' name='" + val.TranMainID + "' class='unabledetailtr'  />";
                        }
                        $("td", row).eq(7).html(deleteCol);
                        $("[id*=maintrgv]").append(row);
                        row = $("[id*=maintrgv] tr:last-child").clone(true);
                    });
                }
                else {
                    // no rows found for main transaction
                    // so bind dummy row to grid view
                    bindDummyRow2GV();
                }
            }
        }        
        // ok to get detail transaction
        // .detailtr
        $(document).on('click', '.detailtr', function () {
            var id = $(this).attr("name");
            $('#opmsgiv').html('');
            MTRIDdelete = id;
            load_detailtrs_4(id);
        });
        // not ok to get detail transaction
        // .unabledetailtr
        $(document).on('click', '.unabledetailtr', function () {
            $('#opmsgiv').html("<p><b>To Account ID does not exist at this time, so you can not Delete Main Transaction and it's Detail Transactions</b></p>");
            $('#detailTRdiv').html('');
        });


httphandler: this will output image (byte[]) to aspx gridview:
call sql stored procedure in aspx:
private byte[] GetImageFromDB(int ImgId)
        {
            string strCon = ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString;
            SqlDataAdapter SqlAda;
            DataSet ds;
            byte[] btImage = null;
            using (SqlConnection Sqlcon = new SqlConnection(strCon))
            {
                using (SqlCommand cmd = new SqlCommand())
                {
                    Sqlcon.Open();
                    cmd.Connection = Sqlcon;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = "SP_ImageUpload";
                    cmd.Parameters.Add(new SqlParameter("@pvchAction", SqlDbType.VarChar, 50));
                    cmd.Parameters.Add(new SqlParameter("@pvchImageId", SqlDbType.Int));
                    cmd.Parameters["@pvchAction"].Value = "select";
                    cmd.Parameters["@pvchImageId"].Value = ImgId;
                    cmd.Parameters.Add("@pIntErrDescOut", SqlDbType.Int).Direction = ParameterDirection.Output;
                    SqlAda = new SqlDataAdapter(cmd);
                    ds = new DataSet();
                    SqlAda.Fill(ds);
                    btImage = (byte[])ds.Tables[0].Rows[0][3];
                }
            }
            return btImage;
        }
sql stored procedure to upload byte[] to sql server table:
protected void btnUploadImage_Click(object sender, EventArgs e)
        {
            string ImageName = string.Empty;
            byte[] Image = null;
            if (ImageUploadToDB.PostedFile != null && ImageUploadToDB.PostedFile.FileName != "")
            {
                ImageName = Path.GetFileName(ImageUploadToDB.FileName);
                Image = new byte[ImageUploadToDB.PostedFile.ContentLength];
                HttpPostedFile UploadedImage = ImageUploadToDB.PostedFile;
                UploadedImage.InputStream.Read(Image, 0, (int)ImageUploadToDB.PostedFile.ContentLength);
            }
            using (SqlConnection Sqlcon = new SqlConnection(strCon))
            {
                using (SqlCommand cmd = new SqlCommand())
                {
                    Sqlcon.Open();
                    cmd.Connection = Sqlcon;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = "SP_ImageUpload";
                    cmd.Parameters.Add(new SqlParameter("@pvchAction", SqlDbType.VarChar, 50));
                    cmd.Parameters.Add(new SqlParameter("@pvchImageName", SqlDbType.VarChar, 100));
                    cmd.Parameters.Add(new SqlParameter("@pvchImage", SqlDbType.Image));
                    cmd.Parameters.Add(new SqlParameter("@pvchCreatedBy", SqlDbType.VarChar, 100));
                    cmd.Parameters.Add("@pIntErrDescOut", SqlDbType.Int).Direction = ParameterDirection.Output;
                    cmd.Parameters["@pvchAction"].Value = "insert";
                    cmd.Parameters["@pvchImageName"].Value = ImageName;
                    cmd.Parameters["@pvchImage"].Value = Image;
                    cmd.Parameters["@pvchCreatedBy"].Value = "Admin";
                    cmd.ExecuteNonQuery();
                    int retVal = (int)cmd.Parameters["@pIntErrDescOut"].Value;
                }
            }
            LoadImages();
        }
this is how to call http handler to output image to gridview:
   protected void GridViewUploadedImageFile_RowDataBound(object sender, GridViewRowEventArgs e)
        {
            if (e.Row.RowType == DataControlRowType.DataRow)
            {
                string ImageID = GridViewUploadedImageFile.DataKeys[e.Row.RowIndex].Values[0].ToString();
                System.Web.UI.WebControls.Image UsrImages = (System.Web.UI.WebControls.Image)e.Row.FindControl("UsrImages");
                UsrImages.ImageUrl = "DisplayImage.ashx?ImgId=" + ImageID;
            }
        }       

how to access aspx:dropdownlistbox in jquery:
    // change event for from bank users list
        $("[id$='DropDownList1']").change(function () {
            $('#ddl1em').html("");
            var frombuid = this.value;
            if (frombuid == 0) {                
                $('#ddl1em').html("<b>select from bank user name!</b>");
                // return;
            }
            // get accounts for from bank user id
            load_accounts_from(frombuid);
        });
----------------
C:\DONE\CD-DEC\7-12\APIStudentBankTR\APIStudentBankTR\ClientMVC
caching
custom ad control
iTextSharp
create bank statement as pdf and download
using System.Web.Helpers;
create chart then create pdf then download
google chart api
mvc html chart helper
(resource) multi language using session to keep track
custom error handles ajax and non ajax request
document management (private and public download)
file upload to sql server
reply to message (parent - child) (master - detail)
resume viewer - resume writer
    
display image :
string imageBase64 = Convert.ToBase64String(Model.ChartByte);
    string imageSrc = string.Format("data:image/gif;base64,{0}",imageBase64);
    <div style="background-color:lightcyan;">
        <img src="@imageSrc" alt="Error..." />
    </div>         

html.actionlink:
    @Html.ActionLink("Open / Download File", "Open_Downlload_AnyFile", "DocMGT", new { fileID = @data.FileUploadFSID }, new { target = "_blank" })                     
              
url.action:
      var getUrl = '@Url.Action("AjaxFileDownload", "FileUploadSqlServer")';
                            window.location = getUrl + "?fileName=" + fileName;

event on button in razor:
                      <button type='button' class='open' name='@mi.MessageID'>Open / Reply</button>|                
                           <button type='button' class='delete' name='@mi.MessageID'>Delete</button>
           <button type='button' class='close' name='@Model.MessageID:@Model.FromTUserID'>Close</button>|                
        <button type='button' class='reply' name='@Model.MessageID:@Model.FromTUserID'>Reply</button>
       $(document).on('click', '.delete', function () {
            var key = $(this).attr("name");
            deletefunction(key);
        });
        function deletefunction(fileid) {
            callDelete(fileid);
        }
        function callDelete(fcuk) {
            var formData = new FormData();
            formData.append("MessageID", fcuk);
            $.ajax({
                url: "/MessageControl/DeleteMessage",
                type: 'POST',
                data: formData,
                cache: false,
                contentType: false,
                processData: false,
                success: function (data) {
                    GetMyMessages();
                },
                error: function (data) {
                    alert("ajax call error");
                }
            });
        }
jquery validation on characters:
    // var specialChars = "<>@@!#$%^&*()_+[]{}?:;|'\"\\,./~`-=";
        var specialChars = "<>";
        var check = function (string) {
            for (i = 0; i < specialChars.length; i++) {
                if (string.indexOf(specialChars[i]) > -1) {
                    return true
                }
            }
            return false;
        }
    $("#btnSubmit2DB").click(function () {
            if (check($('#ResumeEditorContent').val()) == false) {
                // ajax call to insert edited resume into SS varchar(max)-2GB
                var formData = new FormData();
                var ResumeContent = $('#ResumeEditorContent').val();
                formData.append("ResumeContent", ResumeContent);
                $.ajax({
                    url: "/ResumeViewer/EditedResume2SS",
                    type: 'POST',
                    data: formData,
                    cache: false,
                    contentType: false,
                    processData: false,
                    success: function (data) {
                        if (data.Result.StatusCode <= 0) {
                            op_success(data.Result.Message);
                            $('#ResumeEditorContent').val('');
                            reloadafteredit();
                        }
                        else {
                            op_fail(data.Result.Message);                            
                        }
                    },
                    error: function (data) {
                        op_fail("ajax call error : script attack was founnd");
                    }
                });
            }
            else {
                op_fail('Your search string contains illegal characters.');
            }            
        });

--------------------
C:\DONE\CD-DEC\7-29\MVCAreaProject\MVCAreaProject
mvc area
client's ip address and browser information
----------
C:\DONE\CD-DEC\7-29\MVCAuthAuthorization\MVCAuthAuthorization
mvc authentication and authorization
forms authentication
this will redirect to proper view as per your roles
---------
C:\DONE\CD-DEC\8-5\APIfcuk\APIfcuk
api
attribute routing
console based application client to api using HttpClient to perform CRUD with api
CRUD with xml using mvc
------------
C:\DONE\CD-DEC\8-27\ChatAppWCF\ChatAppWCF
api
console based application client to api using HttpClient
windows form based application client to api
wcf
aspx client to wcf
web printing using javascript
form based authentication, update custom data to FormsAuthenticationTicket
sql cache dependency
cache key
sql cache notification
attach role information to FormsAuthenticationTicket ticket
order entry form
update panel, aspx menu, aspx multiview, aspx listview
  <authentication mode="Forms">
      <!--
      <forms loginUrl="~/Account/Login" timeout="2880" defaultUrl="~/" />
      -->
      <forms
        slidingExpiration="true"
        timeout="60"
        loginUrl="~/LoginFA.aspx"
         cookieless="UseCookies"
        />
    </authentication>
    <machineKey
      decryption="AES"

      validation="SHA1"

      decryptionKey="1513F567EE75F7FB5AC0AC4D79E1D9F25430E3E2F1BCDD3370BCFC4EFC97A541"

      validationKey="32CBA563F26041EE5B5FE9581076C40618DCC1218F5F447634EDE8624508A129"
    />    
-----------------
C:\DONE\CD-DEC\9-3\MVCSecurity\MVCSecurity\MVCAutoScroll
ajax based auto scroll
logic is similar to custom paging ajax based

-------
C:\DONE\CD-DEC\9-3\MVCSecurity\MVCSecurity\MVCSecurity
role based authorization
form based authentication
  <authentication mode="Forms">
      <forms loginUrl="~/Account/Login" timeout="2880" />
    </authentication>

    <roleManager defaultProvider="CustomRoleProvider" enabled="true" cacheRolesInCookie="false">
      <providers>
        <clear />
        <add name="CustomRoleProvider" type="MVCSecurity.Models.MyRoleProvider"  />
      </providers>
    </roleManager>

-------
C:\DONE\CD-DEC\9-3\MVCSecurity\MVCSecurity\WFSecurity
aspx
role based authorization
form based authentication
web forms authentication and custom authorization
    
    <authentication mode="Forms">
      <forms loginUrl="~/Login_.aspx" timeout="2880" defaultUrl="~/" />
    </authentication>
<roleManager defaultProvider="CustomRoleProvider_" enabled="true">
      <providers>
        <clear/>
        <add name="CustomRoleProvider_" type="WFSecurity.Models.CustomRoleProvider_"
        applicationName="WFSecurity" writeExceptionsToEventLog="false"/>
      </providers>
    </roleManager>
    

  <location path="Default.aspx">
    <system.web>
      <authorization>
        <allow roles="super,admin,employee"/>
        <deny roles="visitor"/>
        <deny users="?"/>
      </authorization>
    </system.web>
  </location>

  <location path="About.aspx">
    <system.web>
      <authorization>
        <allow roles="visitor"/>
        <deny roles="super,admin,employee"/>
        <deny users="?"/>
      </authorization>
    </system.web>
  </location>
-----------

C:\DONE\CD-DEC\9-4\WCFRestaurantOrder\WCFRestaurantOrder\WCFRestaurantOrder
wcf
windows based client to wcf
backgroundworker (async operations)
windows service for background copy recursive folder copy operation and writing log information to text file
-------------
C:\DONE\CD-DEC\9-14\IMesh\IMesh
wcf
windows based client to wcf
backgroundworker (async operations)
to increase download information from service configure on client side with:
<bindings>
            <basicHttpBinding>
                <binding name="BasicHttpBinding_ILogin" 
                         maxBufferSize="64000000" 
                         maxReceivedMessageSize="64000000" />
            </basicHttpBinding>
        </bindings>
        
--------------

C:\DONE\CD-DEC\10-4\APIReservation\APIReservation
api
attribute based routing
paging and sorting
server side paging
client side sorting
telus
open child window in parent window
get data from child window and further process at parent window
sql cache
sql cache dependency
sql cache notification
cache key
web form is client to api
web form page is async
web form is using web client to connect with api
grid view is using viewstate for client side sorting
paging is done at api
custom server control
gridview is extended as custom server control
custom user control is holding gridview 
------------
C:\DONE\CD-DEC\10-20\MVCOrdersAdmin\MVCOrdersAdmin
mvc
partial view
model validation
model validation on @Html.DropDownList (dropdownlist-selectlist)
parse model validation errors on client side
jsonresult
ajax based paging using PagedList
custom menu managed by jquery
auto model validation based on partial view
manual model validation based on jsonresult
jquery access model and apply it's property
// this will access Model and display it's property using jQ
                var model = @Html.Raw(Json.Encode(Model.DisplayName))                
                $('#headerDiv').html('Hello : ' + model);

                // font-size:
                var headerfontsize = @Html.Raw(Json.Encode(Model.HeaderTextSize))                
                $('#headerDiv').css({ "font-size": headerfontsize });
   function doMainContent() {
                /*
                var color = $( this ).css( "background-color" );
                $( "#result" ).html( "That div is <span style='color:" +
                color + ";'>" + color + "</span>." );
                */
                var myBGColor = @Html.Raw(Json.Encode(Model.DisplayColor))
                // $("#mainDiv").css({ "background-color": "#ffe" });
                $("#mainDiv").css({ "background-color": myBGColor });

                var myFGColor = @Html.Raw(Json.Encode(Model.TextColor))
                $("#mainDiv").css({ "color": myFGColor });

                var contentfontsize = @Html.Raw(Json.Encode(Model.ContentTextSize))
                $('#mainDiv').css({ "font-size": contentfontsize });
            }
------------
C:\DONE\CD-DEC\DONE\11-23\Dumb\Dumb
host wcf to iis
wcf
file linker service
display projects -> file type -> files 
parent child display
display file contents 
partial view
group by with linq
linq multiple groups
     // multiple group
        // this will return files by group on projectid and then in projectid group on filetypeid
        public List<FilesByMultiGRP> GetFilesByPIDTID()        
        {
            var list = new List<PFile_>();
            foreach (var d in db.PFiles.OrderBy(x=>x.ProjectID).ThenBy(x=>x.PFileTypeID))
            {
                PFile_ data = new PFile_();
                data.PFileID = d.PFileID;
                data.PFileName = d.PFileName;
                data.PFilePath = d.PFilePath;
                data.PFileTypeID = d.PFileTypeID;
                data.ProjectID = d.ProjectID;
                list.Add(data);
            }
            var newList = list.GroupBy(x => new { x.ProjectID, x.PFileTypeID })
                    .Select(y => new FilesByMultiGRP
                    {
                        ProjectID = y.Key.ProjectID,
                        TypeID = y.Key.PFileTypeID,    
                        Total = y.Count(),
                        PFiles = y.ToList()
                    }
                    ).ToList();
            foreach (var item in newList)
            {
                Console.WriteLine("Project ID: {0} File Type ID: {1}", item.ProjectID, item.TypeID);
                foreach (var child in item.PFiles)
                {
                    Console.WriteLine("\t Name: {0}", child.PFileName);
                }
            }
            return newList;
        }
--------------
C:\DONE\CD-DEC\DONE\11-20\TimesJobUI\TimesJobUI
auto scroll using jquery
jquery.als-1.7.min.js
this is Image Gallery controller
using jQuery fancy box plugin for image display and file upload dialog
ajax file upload 
-----------
C:\DONE\CD-DEC\DONE\11-17\KeltronSolutions\KeltronSolutions
hide and show image using jquery
--------
C:\DONE\CD-DEC\DONE\11-17\MVCSecurity\MVCSecurity\MVCSecurity
can trap script attack and display proper error message
ajax begin form
@using (Ajax.BeginForm("CreateBUAjaxHelper", "BankUser",null, options))
{
....
application error at global.asax
        // this will connect your Errors controller during 
        // HttpRequestValidationException (when u enter <script> data)
        // or any other Exceptions / Errors 
        // which you can not reach up to at any of your controllers
        protected void Application_Error()
        {
            if (new HttpRequestWrapper(System.Web.HttpContext.Current.Request).IsAjaxRequest())
            {
                // this will work for AjaxHelper at 
                // CreateBUAjaxHelper action of BankUserController
                var ajaxexception = Server.GetLastError();
                var ajaxhttpException = ajaxexception as HttpException;
                Response.Clear();
                Server.ClearError();
                var ajaxrouteData = new RouteData();
                ajaxrouteData.Values["controller"] = "Errors";
                ajaxrouteData.Values["action"] = "GeneralAjax";
                ajaxrouteData.Values["exception"] = ajaxexception;                
                
                // Response.StatusCode = 500;
                // here make it success with 200, so on client side with AjaxHelper's
                /*function OnSuccess(x, y, z) {
                    // alert(x);
                    alert("success : "+x + " : " + y + " : " + z);
                    $("#divMsg").append("<h3>Ajax request successful.</h3>");
                }
                */
                // u can catch custom message which is going to setup at Errors controller's 
                // action
                Response.StatusCode = 200;


                IController ajaxerrorsController = new ErrorsController();
                var ajaxrc = new RequestContext(new HttpContextWrapper(Context), ajaxrouteData);
                ajaxerrorsController.Execute(ajaxrc);
                return;    
            }

            
            // this will work for non ajax actions
            var exception = Server.GetLastError();
            var httpException = exception as HttpException;
            Response.Clear();
            Server.ClearError();
            var routeData = new RouteData();
            routeData.Values["controller"] = "Errors";
            routeData.Values["action"] = "General";
            routeData.Values["exception"] = exception;
            Response.StatusCode = 500;
            if (httpException != null)
            {
                Response.StatusCode = httpException.GetHttpCode();
                switch (Response.StatusCode)
                {
                    case 403:
                        routeData.Values["action"] = "Http403";
                        break;
                    case 404:
                        routeData.Values["action"] = "Http404";
                        break;
                }
            }
            IController errorsController = new ErrorsController();
            var rc = new RequestContext(new HttpContextWrapper(Context), routeData);
            errorsController.Execute(rc);            
        }
----------
C:\DONE\CD-DEC\DONE\11-17\WebFormSSLWCFTR\WebFormSSLWCFTR
wcf
web form is client to wcf
ssl at web form
https
script attack is handled at web form
     // this will handle <script> attack
        void Application_Error(object sender, EventArgs e)
        {
            if (HttpContext.Current.Request.IsSecureConnection)
            {
                Exception ex = Server.GetLastError();
                // Session["GeneralError"] = ex.Message.ToString();
                Session["GeneralError"] = "script attack found...";
                Server.ClearError();
                // HttpContext.Current.Response.Redirect("http://localhost:59433/GeneralErrorPage.aspx");
                HttpContext.Current.Response.Redirect("http://localhost:8899/GeneralErrorPage.aspx");
                return;
            }
        }   
- TransactionSVC is WCF(C:\DONE\CD-DEC\DONE\11-17\TransactionSVC\TransactionSVC)
- WebFormSSLWCFTR is web form application and which is the client application means browser
communicates with this web form application and this web form application communicates with
TransactionSVC WCF
- Secure folder is https (SSL) means when any of the page from Secure folder, browser requests
then it must be https otherwise 403 error.
so your all datas sending / receiving are cypher
- only Secure folder is https (SSL) and not the whole site is https(SSL)
means you can access Home page with only http and you don't need https for it

- this will handle <script> attack
check global.asax file at void Application_Error(object sender, EventArgs e)
- this will encrypt auth cookie using forms auth-check web.config file
at 
	<authentication mode="Forms">
      <forms
        loginUrl="https://localhost:443/secure/Login.aspx"
      />
    </authentication>
    <machineKey
      decryption="AES"
      validation="SHA1"
      decryptionKey="1513F567EE75F7FB5AC0AC4D79E1D9F25430E3E2F1BCDD3370BCFC4EFC97A541"
      validationKey="32CBA563F26041EE5B5FE9581076C40618DCC1218F5F447634EDE8624508A129"
    />.
and after successful login, it will redirect to any default https page
- form based authentication
- role information is attached to authentication cookie
     protected void loginBtn_Click(object sender, EventArgs e)
        {
            if (Page.IsValid)
            {
                ServiceReference1.LoginType data = new LoginType();
                data.Password = pTB.Text;
                data.Username = unTB.Text;
                ServiceReference1.ResponseMessage response = proxy.DoLogin(data);
                if (response.StatusCode >= 1)
                {
                    loginMessageLabel.Text = response.StatusCode + " : " + response.OperationException;
                    loginup.Update();
                }
                else
                {
                    // login success, so set auth cookie and redirect to proper page
                    HttpCookie authCookie = FormsAuthentication.GetAuthCookie(unTB.Text,false);
                    FormsAuthenticationTicket ticket1 = 
                    new FormsAuthenticationTicket(
                         1,                                   // version
                         unTB.Text.Trim(),   // get username  from the form
                         DateTime.Now,                        // issue time is now
                         DateTime.Now.AddMinutes(10),         // expires in 10 minutes
                         false,      // cookie is not persistent
                         "BankUser"  // role assignment is stored in userData
                         );
                    HttpCookie cookie1 = new HttpCookie(FormsAuthentication.FormsCookieName, 
                                        FormsAuthentication.Encrypt(ticket1) );
                    Response.Cookies.Add(cookie1);
                    Response.Redirect("AccountsHome.aspx");
                }
            }
            else
            {
                return;
            }
        }
   <authentication mode="Forms">
      <forms
        loginUrl="https://localhost:443/secure/Login.aspx"
      />
    </authentication>
    <machineKey
      decryption="AES"
      validation="SHA1"
      decryptionKey="1513F567EE75F7FB5AC0AC4D79E1D9F25430E3E2F1BCDD3370BCFC4EFC97A541"
      validationKey="32CBA563F26041EE5B5FE9581076C40618DCC1218F5F447634EDE8624508A129"
    />
    <!-- Turn on Custom Errors -->
    <!--
    <customErrors mode="On"
      defaultRedirect="GeneralErrorPage.aspx">
      <error statusCode="404" redirect="Http404ErrorPage.aspx"/>
    </customErrors>
-->
    
---------
C:\DONE\CD-DEC\DONE\11-12\B2\B2
web form
formview
update panel
listview
gridview
selected index changed
item command
item data bound
row updating
row updated
shopping cart
image with desc display
--------------
C:\DONE\CD-DEC\DONE\11-7\WebFormApp\WebFormApp
Update / Delete using GridView and UpdatePanel
Model Validation (client / server side)
handled all Exceptions at Database level and display proper error message at UI
---------
C:\DONE\CD-DEC\DONE\11-6\App1
silver light application
WCF
Navigation
Local Storage
-------
C:\DONE\CD-DEC\DONE\10-31\MVCMix\MVCMix
custom html helper
@helper MultiLineText(string text) { 
<div style="width:200px">@text</div>
}

@helper CreateImage(string path) {
    <img id="img1" src="@path" />
}

      // this will make list tag
        public static MvcHtmlString ListArrayItems(this HtmlHelper html, List<string> list)
        {
            TagBuilder tag = new TagBuilder("ul");
            foreach (string str in list)
            {
                TagBuilder itemTag = new TagBuilder("li");
                itemTag.SetInnerText(str);
                tag.InnerHtml += itemTag.ToString();
            }
            return new MvcHtmlString(tag.ToString());
        }

        // this will make div tag with some style applied                
        public static MvcHtmlString DivTag(this HtmlHelper html, string data, string divClass)
        {
            TagBuilder tag = new TagBuilder("div");

            tag.SetInnerText(data);
            // tag.InnerHtml += tag.ToString();

            // apply css
            // this will apply css at client side, only set class name at server side while u build
            // div tag
            tag.AddCssClass(divClass);

            return new MvcHtmlString(tag.ToString());
        }

        // this will display some text with html tags
        public static string TextAndHtmlTag(this HtmlHelper html, string data)
        {
            TagBuilder tag = new TagBuilder("div");

            string encodedData = html.Encode(data);
            tag.SetInnerText(encodedData);
            // tag.SetInnerText(data);

            // this will o/p : <p>haha</p>
            // return string.Format("{0}", data);

            // this will o/p : &lt;p&gt;haha&lt;/p&gt;
            return string.Format("{0}", encodedData);
        }

        // this will encode selectively, means This is the message:  and <p> tag 
        // is having effect and only the content from msg variable is encoded
        // so u will see paragraph at o/p
        public static MvcHtmlString DisplayMessage(this HtmlHelper html, string msg)
        {
            string encodedMessage = html.Encode(msg);
            // string encodedMessage = (msg);
            string result = String.Format("This is the message: <p>{0}</p>", encodedMessage);
            return new MvcHtmlString(result);
        }
        public static MvcHtmlString DisplayMessages(this HtmlHelper html, string msg1,string msg2)
        {
            string encodedMessage1 = html.Encode(msg1);
            string encodedMessage2 = html.Encode(msg2);
            string result = String.Format("<p>{0} & {1}</p>", encodedMessage1,encodedMessage2);            
            return new MvcHtmlString(result);
        }
-----------
C:\DONE\CD-DEC\DONE\9-24\MvcApplication1\MvcApplication1
mvc
ajax based paging using PagedList
break and join with javascript and controller
chart using 
// both below for Chart
// assembly : System.Web.DataVisualization
using System.Web.UI.DataVisualization.Charting.ChartTypes;
using System.Web.Helpers;
partial view
json result
model validation on server side
model validation on client side
jquery tool tip
progress bar
         $('a#Chart_Ajax').click(function () {
                $('#ChartDiv').load('@Url.Action("Chart_Ajax", "HotelCondition")');
            });
   
sql:
select * from Reservation
select * from Room

GO

CREATE PROCEDURE OrderSummary @MaxQuantity INT OUTPUT AS
-- SELECT to return a result set summarizing
-- employee sales.
SELECT Ord.EmployeeID, SummSales = SUM(OrDet.UnitPrice * OrDet.Quantity)
FROM Orders AS Ord
     JOIN [Order Details] AS OrDet ON (Ord.OrderID = OrDet.OrderID)
GROUP BY Ord.EmployeeID
ORDER BY Ord.EmployeeID

-- SELECT to fill the output parameter with the
-- maximum quantity from Order Details.
SELECT @MaxQuantity = MAX(Quantity) FROM [Order Details]

-- Return the number of all items ordered.
RETURN (SELECT SUM(Quantity) FROM [Order Details])
GO

-- Test the stored procedure.
-- DECLARE variables to hold the return code
DECLARE @OrderSum INT
DECLARE @LargestOrder INT
-- Execute the procedure, which returns
-- the result set from the first SELECT.
EXEC @OrderSum = OrderSummary @MaxQuantity = @LargestOrder OUTPUT
-- Use the return code and output parameter.
PRINT 'The size of the largest single order was: ' +
                 CONVERT(CHAR(6), @LargestOrder)
PRINT 'The sum of the quantities ordered was: ' +
                 CONVERT(CHAR(6), @OrderSum)
GO



-- reservation
select * from reservation

select * from Room

-- using corelated sub query
select RoomID,RoomTypeID,Location ,sum(TotalReservations) as TotalReservations 
from (
	select Room.RoomID, Room.Location, Room.RoomTypeID,
		(select count(RoomID) from Reservation 
			where Reservation.RoomID = Room.RoomID) as TotalReservations 
	from Room ) x 
group by RoomID,RoomTypeID,Location
-- or using join
select Room.RoomID,Room.RoomTypeID ,Room.Location, count(Reservation.RoomID) as TotalReservations 
from Room 
left outer join Reservation on Room.RoomID = Reservation.RoomID
group by Room.RoomID,Room.RoomTypeID ,Room.Location

select Room.RoomID,Room.RoomTypeID ,Room.Location, count(Reservation.RoomID) as TotalReservations 
from Room 
right outer join Reservation on Room.RoomID = Reservation.RoomID
group by Room.RoomID,Room.RoomTypeID ,Room.Location

SELECT  FromDate_Year = DATEPART(YEAR, FromDate),
        FromDate_Month = DATEPART(MONTH, FromDate),
        ReservationID,  
        COUNT(ReservationID) TotalReservations 
FROM    Reservation
WHERE   FromDate >= '2014-01-01' 
AND     FromDate <= '2014-12-31'
GROUP BY DATEPART(YEAR, FromDate), DATEPART(MONTH, FromDate), ReservationID
order by DATEPART(MONTH, FromDate)


SELECT  FromDate_Year = DATEPART(YEAR, FromDate),
        Month_Name = DATEPART(MONTH, FromDate),  
        COUNT(ReservationID) TotalReservations 
FROM    Reservation
WHERE   FromDate >= '2014-01-01' 
AND     FromDate <= '2014-12-31'
GROUP BY DATEPART(YEAR, FromDate), DATEPART(MONTH, FromDate)
order by DATEPART(MONTH, FromDate)



select * from Customers
select * from Orders
select * from [Order Details]

select OrderID, count(*) as OrderCount, sum(UnitPrice*Quantity) as OrderAmount 
from [Order Details]
group by OrderID

select o.OrderID, o.CustomerID, o.ShipAddress, d.OrderCount, d.OrderAmount 
from Orders o 
inner join 
	( select OrderID, count(*) as OrderCount, sum(UnitPrice*Quantity) as OrderAmount 
		from [Order Details] 
		group by OrderID ) d 
on o.OrderID = d.OrderID
-- where o.CustomerID='ALFKI'
order by o.CustomerID



-- 6, 12, 4596.20
select o.CustomerID, count(*) as OrderCount, 
	sum(d.OrderCount) as ItemCount, sum(d.OrderAmount) as OrderAmount 
from Orders o 
inner join ( select OrderID, count(*) as OrderCount, sum(UnitPrice*Quantity) as OrderAmount 
			from [Order Details] 
			group by OrderID ) d 
on o.OrderID = d.OrderID 
group by o.CustomerID

-- this will return customer wise total number of orders and total number of items
-- in all orders made by customer and total order amount by customer
alter procedure CustomerwiseOrderDetails
as
select o.CustomerID, count(*) as TotalNoOfOrders, 
	sum(d.OrderCount) as TotalNoOfItemsOrdered, sum(d.OrderAmount) as TotalOrderAmount 
from Orders o 
inner join ( select OrderID, count(*) as OrderCount, sum(UnitPrice*Quantity) as OrderAmount 
			from [Order Details] 
			group by OrderID ) d 
on o.OrderID = d.OrderID 
group by o.CustomerID

exec CustomerwiseOrderDetails


-- will return data for graph
-- month wise total number of rooms reserved in hotel
SELECT  FromDate_Year = DATEPART(YEAR, FromDate),
        Month_Name = DATEPART(MONTH, FromDate),  
        COUNT(ReservationID) TotalReservations 
FROM    Reservation
WHERE   FromDate >= '2014-01-01' 
AND     FromDate <= '2014-12-31'
GROUP BY DATEPART(YEAR, FromDate), DATEPART(MONTH, FromDate)
order by DATEPART(MONTH, FromDate)

SELECT DATENAME(month, GETDATE()) AS 'Month Name'

-- month wise total number of rooms reserved in hotel
alter PROCEDURE MonthwiseReservations AS
SELECT  Year_Name = DATEPART(YEAR, FromDate),
        Month_Number = DATEPART(MONTH, FromDate),  
		Month_Name = DATENAME(MONTH, FromDate),  
        COUNT(ReservationID) TotalReservations 
FROM    Reservation
WHERE   FromDate >= '2014-01-01' 
AND     FromDate <= '2014-12-31'
GROUP BY DATEPART(YEAR, FromDate), DATEPART(MONTH, FromDate),DATENAME(MONTH, FromDate)
order by DATEPART(MONTH, FromDate)

exec MonthwiseReservations


-- input month name and will return all reserved rooms(reservation) for that month name
alter PROCEDURE MonthwiseAllRoomsStatus 
@inMonthName nvarchar(20) = null
AS
SELECT	ReservationID,
		FromDate,  
		ToDate,
		RoomID,
		FirstName,
		LastName,
		City
FROM    Reservation
WHERE   DATENAME(MONTH, FromDate)=@inMonthName
-- WHERE   DATENAME(MONTH, FromDate)='September'
order by RoomID

exec MonthwiseAllRoomsStatus @inMonthName = 'October'


select * from reservation where roomid=11 order by FromDate

------------
C:\DONE\CD-JAN\5-22\MVCApp\MVCApp
mvc
model validation on html dropdownlist box-selectlist
html dropdownlist box for state - city
model validation on datetime
image management like display image, delete image for client
custom paging and sorting
using session for sorting on server side
master detail display
display details of student just right below it's row
-------------
C:\DONE\CD-JAN\5-28
CRUD operations using angular and mvc
jquery datatable
CRUD operations using angular and api
--------
C:\DONE\CD-JAN\APIStudentReg\APIStudentReg
api
aspx
calendar bind to textbox control
aspx used webclient to connect with api
------
C:\DONE\CD-JAN\DialogValidation\DialogValidation\jQuery\jQuery
mvc
partial view
model validation using jquery dialog
-------
C:\DONE\CD-JAN\5-23\5-23\fcuk
C:\DONE\CD-JAN\5-23\5-23\NGAPICRUD
api
angular
crud operation using angular api
route provider
------
C:\DONE\CD-JAN\5-23\5-23\NGApp1
angular directive
------
C:\DONE\CD-JAN\5-29\5-29\NGNestedView
api
angular
paging, sorting
state provider
nested view using state provider
-------------
C:\DONE\CD-JAN\SimpleFileUploadv2\SimpleFileUpload
file upload control
silverlight
progress bar
file break and join
ashx file upload handler
--------
C:\DONE\CD-JAN\SLCH2\SLCH2
silverlight
model binding (2 way, 1 way)
converters for image, date, currency
datagrid
master detail
sorting
filter
data template
implicit template
validation
update ui
binding collection
binding single object
mvvm
auto update view when collection or single object gets changed
asmx service
file upload with progress bar
--------
C:\DONE\CD-JAN\angular-slider\angular-slider\slider
angular image slider
------
C:\DONE\CD-JAN\CRUD Operations in MVC with AngularJs\CRUD Operations in MVC with AngularJs
mvc
angular
crud
-------
C:\DONE\CD-JAN\fcuk\fcuk
angular
api
crud
route provider
------
C:\DONE\CD-JAN\JSWebStorage
javascript web storage
html5
--------
C:\DONE\CD-JAN\NG_Calendar\NG_Calendar
calendar
angular
directive
app.directive('datepicker', function () {
    return {
        restrict: 'A',
        
	require: 'ngModel',
        
	link: function (scope, element, attrs, ngModelCtrl) {
            $(function () {
                element.datepicker({
                    dateFormat: 'dd/mm/yy',

                    onSelect: function (date) {
                        ngModelCtrl.$setViewValue(date);

                        scope.$apply();
                    }
                });
            });
        }
    }
});

<input type="text" ng-model="date" datepicker />
---------
C:\DONE\CD-JAN\NG_MVC_CRUD\NG_MVC_CRUD
angular
mvc
crud
nganimate
image slider using angular
------------
mvc
angular
sports store application
cart
book code
paging
--------
C:\DONE\CD-JAN\MVCTuning\MVCTuning
mvc
javascript (jquery) updates collection on client side to match with data on server side
after crud operation
ajax based file upload
break and join (n number of parts depends on size of file)
json result
partial view
----------
C:\DONE\CD-JAN\APITuning\APITuning
bootstrap
angular
jquery
api
mvc
route provider
datepicker calender
custom paging
super store product discount management
counter screen
div with scroll bar
angular updates collection on client side to match with data on server side
after crud operation
web print
integrate jquery code with angular to give some effect to ui




























          
                       
        




        
           

        


  




