import { Component, OnInit } from '@angular/core';
import { UserService } from '../services/user.service';
import { Router } from '@angular/router';
import { FormBuilder, FormGroup, Validators } from '@angular/forms';
import { LocalDataService } from '../services/local-data.service';

import { SocialAuthService, GoogleLoginProvider, SocialUser } from 'angularx-social-login';

@Component({
  selector: 'signin',
  templateUrl: './signin.component.html',
  styleUrls: ['./signin.component.css']
})

export class SigninComponent implements OnInit {
  signinForm: FormGroup;
  submitted = false;

  signinModel = {
    UserName: '',
    Password: ''
  };


  /////////////google
  socialUser = {
    authToken: '',
    firstName: '',
    lastName: '',
    name: '',
    idToken: '',
    provider: ''
  };
  ExternalAuthDto = {
    provider: '',
    idToken: ''
  };
  ///////////////google end////////////


  constructor(
    private fb: FormBuilder,
    public userService: UserService,
    public router: Router,
    public localDataService: LocalDataService,
    public socialAuthService: SocialAuthService
  ) { }

  ngOnInit() {

    this.signinForm = this.fb.group({
      UserName: ['', Validators.required],
      Password: ['', Validators.required]
    })


    if (this.userService.isLoggedIn) {
      // already logged in, so return to home page
      this.router.navigate(['/home']);
    }
    else {
      // not logged in yet
    }

    this.localDataService.setLoginError('');
  }

  //////////////////google
  /////////issue--- display last signed in google userName at header 
  loginWithGoogle(): void {

    console.log('login with google...');

    this.socialAuthService.signIn(GoogleLoginProvider.PROVIDER_ID);


    this.socialAuthService.authState.subscribe((user) => {
      this.socialUser = user;
      this.ExternalAuthDto.idToken = this.socialUser.idToken;
      this.ExternalAuthDto.provider = this.socialUser.provider;
      
      this.externalLogin();
    });
  } 
  externalLogin () {
    console.log('external login...');
    this.userService.externalLogin(this.ExternalAuthDto);
  }
  //////////////////// google end//////////////////



  get signinFormControl() {
    return this.signinForm.controls;
  }

  onSubmit() {
    this.submitted = true;
    if (this.signinForm.valid) {
      console.table(this.signinForm.value);

      this.signinModel.UserName = this.signinForm.value["UserName"];
      this.signinModel.Password = this.signinForm.value["Password"];

      this.userService.signin(this.signinModel);
    }
  }

}

-----------------------------------------------------------------

import { Injectable } from '@angular/core';
import { FormBuilder, Validators, FormGroup } from '@angular/forms';

import { Observable, throwError } from 'rxjs';
import { catchError, map } from 'rxjs/operators';
import { HttpClient, HttpHeaders, HttpErrorResponse } from '@angular/common/http';
import { Router } from '@angular/router';

import { LocalDataService } from './local-data.service';


@Injectable({
  providedIn: 'root'
})
export class UserService {
  endpoint: string = 'https://localhost:44366/api/Authenticate';
  headers = new HttpHeaders().set('Content-Type', 'application/json');
  currentUser = {};

  constructor(
    private http: HttpClient,
    public router: Router,
    private localDataService: LocalDataService
  ) {
  }

  ///////////////google
  externalLogin(externalAuthDto) {
    let removeUserName = localStorage.removeItem('userName');
    let removeLoginError = localStorage.removeItem('loginError');
    this.localDataService.setLoginError('');
    this.localDataService.setUserName('');

    var userTokenData = {
      UserName: '',
      Token: '',
      LoginTime: '',
      ResponseCode: 0,
      ResponseMessage: ''
    }
    
    let promise = new Promise<void>((resolve, reject) => {

      this.http.post(this.endpoint + '/ExternalLogin', externalAuthDto)
        .toPromise()
        .then(
          (res: any) => { // Success           
            resolve();
            if (res.response.status == '200') {
              userTokenData.Token = res.token;
              userTokenData.ResponseMessage = res.response.message;
              userTokenData.UserName = res.userName;

              localStorage.setItem('token', userTokenData.Token);
              localStorage.setItem('userName', userTokenData.UserName);

              this.localDataService.setUserName(userTokenData.UserName);
              this.localDataService.setLoginError('');

              // update local data service for google signed in
              this.localDataService.setIsGoogleSignedIn(true);


              this.router.navigate(['/home']);
            }
            else {
            }
          },
          msg => {
            console.log(msg);
          }
        );
    });
    return promise;    
  }
  /////////////////google end//////////



  // Sign-in
  signin(signinModel) {

    let removeUserName = localStorage.removeItem('userName');
    let removeLoginError = localStorage.removeItem('loginError');
    this.localDataService.setLoginError('');
    this.localDataService.setUserName('');

    var userTokenData = {
      UserName: '',
      Token: '',
      LoginTime: '',
      ResponseCode: 0,
      ResponseMessage: ''
    }

    let promise = new Promise<void>((resolve, reject) => {

      this.http.post(this.endpoint + '/login', signinModel)
        .toPromise()
        .then(
          (res: any) => { // Success           
            resolve();

            if (res.response.status == '200') {
              userTokenData.Token = res.token;
              userTokenData.ResponseMessage = res.response.message;
              userTokenData.UserName = res.userName;

              localStorage.setItem('token', userTokenData.Token);
              localStorage.setItem('userName', userTokenData.UserName);

              this.localDataService.setUserName(userTokenData.UserName);
              this.localDataService.setLoginError('');

              this.router.navigate(['/home']);
            }
            else {         
            }       
          },
          msg => {
            this.handleLoginError(msg);
          }
        );
    });
    return promise;
  }

  getToken() {
    return localStorage.getItem('token');
  }

  get isLoggedIn(): boolean {
    let authToken = localStorage.getItem('token');
    return (authToken !== null) ? true : false;
  }

  doLogout() {


    let removeToken = localStorage.removeItem('token');
    let removeUserName = localStorage.removeItem('userName');
    let removeLoginError = localStorage.removeItem('loginError');

    this.localDataService.setLoginError('');
    this.localDataService.setUserName('');

    if (removeToken == null) {
      this.router.navigate(['/home']);
    }
  }

  // Error Login
  handleLoginError(error) {
    this.localDataService.setLoginError(error.error.response.message);
    this.localDataService.setUserName('');
  }


  // Error Register
  handleRegisterError(error) {
    this.localDataService.setRegisterMessage(error.error.message);
  }

  // register
  register(registerModel) {

    let promise = new Promise((resolve, reject) => {
      this.http.post(this.endpoint + '/register', registerModel)
        .toPromise()
        .then(
          (res: any) => {
            console.log(res);

            if (res.succeeded) {
              this.localDataService.setRegisterMessage('User is Created...');
              console.log(this.localDataService.getRegisterMessage());
            }
          },
          err => {
            this.handleRegisterError(err);
          }
        );
    });
    return promise;
  }

}

---------------------------------------------------------------

<div class="container">
    <div class="row">
        <div class="col-md-6 mx-auto">
            <div class="card">
                <div class="card-header">
                    <h3>Login</h3>
                    <h5 style="font-size:medium; color: red;">
                        {{this.localDataService.getLoginError()}}
                    </h5>
                </div>
                <div class="card-body">
                    <form class="form-signin" [formGroup]="signinForm" (ngSubmit)="onSubmit()">
                        <h3 class="h3 mb-3 font-weight-normal text-center">Please sign in</h3>
                        <div class="form-group">
                            <label>User Name</label>
                            <input type="text" class="form-control" formControlName="UserName">
                            <span class="text-danger"
                                *ngIf="(signinFormControl.UserName.touched || submitted) && signinFormControl.UserName.errors?.required">
                                User Name is required
                            </span>
                        </div>
                        <div class="form-group">
                            <label>Password</label>
                            <input type="password" class="form-control" formControlName="Password">
                            <span class="text-danger"
                                *ngIf="(signinFormControl.Password.touched || submitted) && signinFormControl.Password.errors?.required">
                                Password is required
                            </span>
                        </div>
                        <div class="form-group">
                            <button type="submit" class="btn btn-success">Signin</button>
                        </div>

                        <div class="form-group">
                            <button type="button" (click)="loginWithGoogle()" 
                                class="btn btn-danger">Login with Google</button>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
</div>

-------------------------------------------


import { Component, OnInit } from '@angular/core';
import { UserService } from '../services/user.service';
import { LocalDataService } from '../services/local-data.service';

import { SocialAuthService, GoogleLoginProvider, SocialUser } from 'angularx-social-login';


@Component({
  selector: 'header',
  templateUrl: './header.component.html',
  styleUrls: ['./header.component.css']
})
export class HeaderComponent implements OnInit {

  userName: string;

 
  constructor(public socialAuthService: SocialAuthService, public userService: UserService, public localDataService: LocalDataService) { }

  ngOnInit() {
    // needed to keep displaying user name even when user refresh web page after 
    // login success
    this.userName = localStorage.getItem('userName');
  }

  logout() {
    this.userService.doLogout();

    // need to reset UserName in header component
    this.userName = '';



  }


}

-------------------------------------------------------

<nav class="navbar navbar-expand-md navbar-dark" style="background-color: green;">
    
    <div class="mx-auto order-0">
        <span>Kijiji</span>
        <button class="navbar-toggler" type="button" data-toggle="collapse" data-target=".dual-collapse2">
            <span class="navbar-toggler-icon"></span>
        </button>
    </div>

    <div class="navbar-collapse collapse w-100 order-1 order-md-0 dual-collapse2">
        <ul class="navbar-nav mr-auto">
            <li class="nav-item active">
                <a class='nav-link' routerLinkActive='active' [routerLink]="['/home']">Home</a>
            </li>
            <li class="nav-item">
                <a class="nav-link" [routerLink]="['/employee-list']">Employee</a>
            </li>
        </ul>
    </div>
    
    <div class="navbar-collapse collapse w-100 order-3 dual-collapse2">
        <ul class="navbar-nav ml-auto">
            <li class="nav-item">
                <a class='nav-link' *ngIf="!this.userService.isLoggedIn" [routerLink]="['/signin']">Login
                </a>
            </li>
            <li class="nav-item">
                <a class='nav-link' *ngIf="!this.userService.isLoggedIn" [routerLink]="['/registration']">Register
                </a>
            </li>


            <span *ngIf="this.localDataService.getUserName() || userName" style="font-size: xx-large; color: red;">
                Welcome...
            </span>
            <!-- both needed -->
            <span *ngIf="this.localDataService.getUserName()" style="font-size: xx-large; color: red;">
                {{this.localDataService.getUserName()}}
            </span>
            <span *ngIf="userName" style="font-size: xx-large; color: red;">
                {{userName}}
            </span>
            <span *ngIf="this.localDataService.getUserName() || userName"
                style="font-size: xx-large; color: red; margin-right: 100px;">
                !
            </span>

            <button (click)="logout()" *ngIf="this.userService.isLoggedIn" type="button" class="btn btn-danger">Logout
            </button>

        </ul>
    </div>
</nav>

--------------------------------------